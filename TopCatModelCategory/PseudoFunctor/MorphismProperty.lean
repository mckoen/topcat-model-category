import TopCatModelCategory.PseudoFunctor.LaxNatTrans
import TopCatModelCategory.PseudoFunctor.Pseudofunctor
import TopCatModelCategory.Iso
import TopCatModelCategory.MorphismProperty
import TopCatModelCategory.CatCommSq
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete
import Mathlib.CategoryTheory.Bicategory.Functor.Pseudofunctor
import Mathlib.CategoryTheory.Category.Cat
import Mathlib.CategoryTheory.MorphismProperty.Composition
import Mathlib.CategoryTheory.MorphismProperty.Retract
import Mathlib.CategoryTheory.MorphismProperty.Concrete
import Mathlib.CategoryTheory.CommSq

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Bicategory

namespace Pseudofunctor

section

variable (B : Type u‚ÇÅ) [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

@[simps]
def const (Y : C) : Pseudofunctor B C where
  obj _ := Y
  map _ := ùüô _
  map‚ÇÇ _ := ùüô _
  mapId _ := Iso.refl _
  mapComp _ _ := (Œª_ (ùüô Y)).symm

variable {B} (F : Pseudofunctor B C)

instance (X : B) : IsIso (F.toLax.mapId X) := by dsimp; infer_instance
instance {X Y Z : B} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : IsIso (F.toLax.mapComp f g) := by dsimp; infer_instance

end

end Pseudofunctor

variable {B : Type u‚ÇÅ} [Category.{v‚ÇÅ} B] {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
  {F : Pseudofunctor (LocallyDiscrete B) Cat.{v‚ÇÇ, u‚ÇÇ}}

namespace MorphismProperty

section

variable (F)

def ofPseudofunctor : MorphismProperty B := fun _ _ f ‚Ü¶ (F.map ‚ü®f‚ü©).IsEquivalence

@[simp]
lemma ofPseudofunctor_iff {X Y : B} (f : X ‚ü∂ Y) :
    ofPseudofunctor F f ‚Üî (F.map ‚ü®f‚ü©).IsEquivalence := Iff.rfl

instance : (ofPseudofunctor F).IsMultiplicative where
  id_mem X := Functor.isEquivalence_of_iso (show _ ‚âÖ ùü≠ _ from F.mapId ‚ü®X‚ü©).symm
  comp_mem f g hf hg := by
    rw [ofPseudofunctor_iff] at hf hg
    have : Functor.IsEquivalence (F.map ‚ü®f‚ü© ‚ãô F.map ‚ü®g‚ü©) := inferInstance
    exact Functor.isEquivalence_of_iso (F.mapComp ‚ü®f‚ü© ‚ü®g‚ü©).symm

instance : (ofPseudofunctor F).HasTwoOutOfThreeProperty where
  of_postcomp f g hg hfg := by
    rw [ofPseudofunctor_iff] at hg hfg
    have := Functor.isEquivalence_of_iso (F.mapComp ‚ü®f‚ü© ‚ü®g‚ü©)
    exact Functor.isEquivalence_of_comp_right (F.map ‚ü®f‚ü©) (F.map ‚ü®g‚ü©)
  of_precomp f g hf hfg := by
    rw [ofPseudofunctor_iff] at hf hfg
    have := Functor.isEquivalence_of_iso (F.mapComp ‚ü®f‚ü© ‚ü®g‚ü©)
    exact Functor.isEquivalence_of_comp_left (F.map ‚ü®f‚ü©) (F.map ‚ü®g‚ü©)

instance : (ofPseudofunctor F).IsStableUnderRetracts where
  of_retract {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ f g} hf hg := by
    rw [ofPseudofunctor_iff] at hg ‚ä¢
    let e‚ÇÅ : F.map ‚ü®hf.i.left‚ü© ‚ãô F.map ‚ü®hf.r.left‚ü© ‚âÖ ùü≠ _ := by
      refine (F.mapComp' _ _ _ ?_).symm ‚â™‚â´ F.mapId ‚ü®X‚ÇÅ‚ü©
      rw [‚Üê Quiver.Hom.id_toLoc, ‚Üê hf.left.retract, Quiver.Hom.comp_toLoc]
      rfl
    let e‚ÇÇ : F.map ‚ü®hf.i.right‚ü© ‚ãô F.map ‚ü®hf.r.right‚ü© ‚âÖ ùü≠ _ := by
      refine (F.mapComp' _ _ _ ?_).symm ‚â™‚â´ F.mapId ‚ü®X‚ÇÇ‚ü©
      rw [‚Üê Quiver.Hom.id_toLoc, ‚Üê hf.right.retract, Quiver.Hom.comp_toLoc]
      rfl
    have sq : CommSq hf.i.left f g hf.i.right := ‚ü®hf.i.w‚ü©
    have sq' : CommSq hf.r.left g f hf.r.right := ‚ü®hf.r.w‚ü©
    letI := F.catCommSqOfSq sq
    letI := F.catCommSqOfSq sq'
    apply Functor.isEquivalence_of_retract (e‚ÇÅ := e‚ÇÅ) (e‚ÇÇ := e‚ÇÇ) (F := F.map ‚ü®f‚ü©) (G := F.map ‚ü®g‚ü©)
    dsimp [CatCommSq.iso]
    ext X
    rw [‚Üê cancel_epi ((F.map ‚ü®f‚ü©).map ((F.mapComp' ‚ü®hf.i.left‚ü© ‚ü®hf.r.left‚ü© ‚ü®ùüô _‚ü©
      (by rw [‚Üê hf.left.retract]; rfl)).hom.app X))]
    have := NatTrans.congr_app (congr_arg Iso.hom (F.isoMapOfSq'_horiz_comp
      sq sq' hf.left.retract hf.right.retract)) X
    dsimp [e‚ÇÅ, e‚ÇÇ] at this ‚ä¢
    simp only [comp_id, id_comp] at this ‚ä¢
    erw [‚Üê reassoc_of% this]
    rw [F.isoMapOfSq'_horiz_id f]
    dsimp
    erw [‚Üê Functor.map_comp, Iso.hom_inv_id_app_assoc]
    simp

end

section

variable (œÄ : LaxNatTrans F.toLax (Pseudofunctor.const _ (Cat.of C)).toLax)

def ofLaxNatTrans : MorphismProperty B := fun _ _ f ‚Ü¶ IsIso (œÄ.naturality ‚ü®f‚ü©)

@[simp]
lemma ofLaxNatTrans_iff {X Y : B} (f : X ‚ü∂ Y) :
    ofLaxNatTrans œÄ f ‚Üî IsIso (œÄ.naturality ‚ü®f‚ü©) := Iff.rfl

lemma ofLaxNatTrans_iff_isIso_app {X Y : B} (f : X ‚ü∂ Y) :
    ofLaxNatTrans œÄ f ‚Üî ‚àÄ (x : F.obj ‚ü®X‚ü©), IsIso ((œÄ.naturality ‚ü®f‚ü©).app x) := by
  rw [ofLaxNatTrans_iff, NatTrans.isIso_iff_isIso_app]
  rfl

instance : (ofLaxNatTrans œÄ).IsMultiplicative where
  id_mem X := by
    have := œÄ.naturality_id ‚ü®X‚ü©
    dsimp at this
    simp only [Bicategory.whiskerLeft_id, id_comp] at this
    change IsIso (œÄ.naturality (ùüô { as := X }))
    rw [this]
    infer_instance
  comp_mem {X Y Z} f g hf hg := by
    simp only [ofLaxNatTrans_iff] at hf hg ‚ä¢
    have := œÄ.naturality_comp ‚ü®f‚ü© ‚ü®g‚ü©
    dsimp at this
    simp only [unitors_equal, whiskerLeft_rightUnitor, assoc, Bicategory.whiskerRight_id,
      Iso.cancel_iso_inv_left, Iso.cancel_iso_hom_left] at this
    change IsIso (œÄ.naturality ({ as := f } ‚â´ { as := g }))
    rw [this]
    infer_instance

instance : (ofLaxNatTrans œÄ).HasOfPostcompProperty (ofLaxNatTrans œÄ) where
  of_postcomp {X Y Z} f g hg hfg := by
    simp only [ofLaxNatTrans_iff_isIso_app] at hg hfg ‚ä¢
    intro x
    have := NatTrans.congr_app (œÄ.naturality_comp ‚ü®f‚ü© ‚ü®g‚ü©) x
    dsimp [Cat.associator_hom_app, Cat.associator_inv_app, Cat.leftUnitor_hom_app] at this
    simp only [id_comp] at this
    replace hfg : IsIso ((œÄ.naturality (‚ü®f‚ü© ‚â´ ‚ü®g‚ü©)).app x) := hfg x
    simpa [this] using hfg

instance : (ofPseudofunctor F ‚äì ofLaxNatTrans œÄ).HasTwoOutOfThreeProperty where
  of_postcomp {X Y Z} f g hg hfg :=
    ‚ü®(ofPseudofunctor F).of_postcomp _ _ hg.1 hfg.1,
      (ofLaxNatTrans œÄ).of_postcomp _ _ hg.2 hfg.2‚ü©
  of_precomp := by
    rintro X Y Z f g ‚ü®hf‚ÇÅ, hf‚ÇÇ‚ü© ‚ü®hfg‚ÇÅ, hfg‚ÇÇ‚ü©
    refine ‚ü®(ofPseudofunctor F).of_precomp _ _ hf‚ÇÅ hfg‚ÇÅ, ?_‚ü©
    simp only [ofPseudofunctor_iff ] at hf‚ÇÅ
    simp only [ofLaxNatTrans_iff_isIso_app] at hf‚ÇÇ hfg‚ÇÇ ‚ä¢
    rintro y
    obtain ‚ü®x, ‚ü®e‚ü©‚ü© : ‚àÉ (x : F.obj ‚ü®X‚ü©), Nonempty ((F.map ‚ü®f‚ü©).obj x ‚âÖ y) :=
      ‚ü®_, ‚ü®(F.map ‚ü®f‚ü©).objObjPreimageIso y‚ü©‚ü©
    have := NatTrans.congr_app (œÄ.naturality_comp ‚ü®f‚ü© ‚ü®g‚ü©) x
    dsimp [Cat.associator_hom_app, Cat.associator_inv_app, Cat.leftUnitor_hom_app] at this
    simp only [id_comp] at this
    simpa [NatTrans.isIso_app_iff_of_iso _ e.symm, this] using
      (show IsIso ((œÄ.naturality (‚ü®f‚ü© ‚â´ ‚ü®g‚ü©)).app x) from hfg‚ÇÇ x)

end

section

variable {Œπ : Type*} (œÄ : Œπ ‚Üí LaxNatTrans F.toLax (Pseudofunctor.const _ (Cat.of C)).toLax)

def ofLaxNatTransFamily : MorphismProperty B :=
  (ofPseudofunctor F ‚äì ‚®Ö (i : Œπ), ofLaxNatTrans (œÄ i))

instance : (ofLaxNatTransFamily œÄ).IsMultiplicative := by
  dsimp [ofLaxNatTransFamily]
  infer_instance

@[simp]
lemma ofLaxNatTransFamily_iff {X Y : B} (f : X ‚ü∂ Y) :
    ofLaxNatTransFamily œÄ f ‚Üî ofPseudofunctor F f ‚àß ‚àÄ i, ofLaxNatTrans (œÄ i) f := by
  simp only [ofLaxNatTransFamily, ofPseudofunctor_iff, min_iff, iInf_iff]

instance : (ofLaxNatTransFamily œÄ).HasTwoOutOfThreeProperty where
  of_postcomp f g hg hfg := by
    simp only [ofLaxNatTransFamily_iff] at hg hfg ‚ä¢
    exact ‚ü®(ofPseudofunctor F).of_postcomp f g hg.1 hfg.1,
      fun i ‚Ü¶ (ofLaxNatTrans (œÄ i)).of_postcomp f g (hg.2 i) (hfg.2 i)‚ü©
  of_precomp f g hf hfg := by
    simp only [ofLaxNatTransFamily_iff] at hf hfg ‚ä¢
    refine ‚ü®(ofPseudofunctor F).of_precomp f g hf.1 hfg.1, fun i ‚Ü¶ ?_‚ü©
    have : (ofPseudofunctor F ‚äì ofLaxNatTrans (œÄ i)) f := ‚ü®hf.1, hf.2 i‚ü©
    exact ((ofPseudofunctor F ‚äì ofLaxNatTrans (œÄ i)).of_precomp f g this
      (‚ü®hfg.1, hfg.2 i‚ü©)).2

end

end MorphismProperty

end CategoryTheory
