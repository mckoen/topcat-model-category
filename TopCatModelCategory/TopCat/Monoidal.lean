import Mathlib.Topology.Category.TopCat.Limits.Products
import Mathlib.Topology.UnitInterval
import Mathlib.CategoryTheory.ChosenFiniteProducts

universe u

open CategoryTheory Limits MonoidalCategory

namespace TopCat

instance : ChosenFiniteProducts TopCat.{u} where
  terminal := ‚ü®_, isTerminalPUnit‚ü©
  product X Y := ‚ü®prodBinaryFan X Y, X.prodBinaryFanIsLimit Y‚ü©

@[simp]
theorem tensor_apply {W X Y Z : TopCat.{u}} (f : W ‚ü∂ X) (g : Y ‚ü∂ Z) (p : ‚Üë(W ‚äó Y)) :
    (f ‚äó g).hom p = (f p.1, g p.2) :=
  rfl

@[simp]
theorem whiskerLeft_apply (X : TopCat.{u}) {Y Z : TopCat.{u}} (f : Y ‚ü∂ Z) (p : ‚Üë(X ‚äó Y)) :
    (X ‚óÅ f) p = (p.1, f p.2) :=
  rfl

@[simp]
theorem whiskerRight_apply {Y Z : TopCat.{u}} (f : Y ‚ü∂ Z) (X : TopCat.{u}) (p : ‚Üë(Y ‚äó X)) :
    (f ‚ñ∑ X) p = (f p.1, p.2) :=
  rfl

@[simp]
theorem leftUnitor_hom_apply {X : TopCat.{u}} {x : X} {p : PUnit.{u + 1}} :
    (Œª_ X).hom (p, x) = x :=
  rfl

@[simp]
theorem leftUnitor_inv_apply {X : TopCat.{u}} {x : X} :
    (Œª_ X).inv x = (PUnit.unit, x) :=
  rfl

@[simp]
theorem rightUnitor_hom_apply {X : TopCat.{u}} {x : X} {p : PUnit.{u + 1}} :
    (œÅ_ X).hom (x, p) = x :=
  rfl

@[simp]
theorem rightUnitor_inv_apply {X : TopCat.{u}} {x : X} :
    (œÅ_ X).inv x = (x, .unit) :=
  rfl

@[simp]
theorem associator_hom_apply {X Y Z : TopCat.{u}} {x : X} {y : Y} {z : Z} :
    (Œ±_ X Y Z).hom ((x, y), z) = (x, (y, z)) :=
  rfl

@[simp]
theorem associator_inv_apply {X Y Z : TopCat.{u}} {x : X} {y : Y} {z : Z} :
    (Œ±_ X Y Z).inv (x, (y, z)) = ((x, y), z) :=
  rfl

@[simp] theorem associator_hom_apply_1 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).hom x).1 = x.1.1 :=
  rfl

@[simp] theorem associator_hom_apply_2_1 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).hom x).2.1 = x.1.2 :=
  rfl

@[simp] theorem associator_hom_apply_2_2 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).hom x).2.2 = x.2 :=
  rfl

@[simp] theorem associator_inv_apply_1_1 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).inv x).1.1 = x.1 :=
  rfl

@[simp] theorem associator_inv_apply_1_2 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).inv x).1.2 = x.2.1 :=
  rfl

@[simp] theorem associator_inv_apply_2 {X Y Z : TopCat.{u}} {x} :
    ((Œ±_ X Y Z).inv x).2 = x.2.2 :=
  rfl

@[simp]
theorem braiding_hom_apply {X Y : TopCat.{u}} {x : X} {y : Y} :
    (Œ≤_ X Y).hom (x, y) = (y, x) :=
  rfl

@[simp]
theorem braiding_inv_apply {X Y : TopCat.{u}} {x : X} {y : Y} :
    (Œ≤_ X Y).inv (y, x) = (x, y) :=
  rfl

@[simp]
protected theorem lift_apply {X Y Z : TopCat.{u}} {f : X ‚ü∂ Y} {g : X ‚ü∂ Z} {x : X} :
    ChosenFiniteProducts.lift f g x = (f x, g x) :=
  rfl

def I : TopCat.{u} := TopCat.of (ULift unitInterval)

def I.mk (t : unitInterval) : I := ULift.up t

instance : OfNat I 0 := ‚ü®I.mk 0‚ü©
instance : OfNat I 1 := ‚ü®I.mk 1‚ü©

open ChosenFiniteProducts

noncomputable def Œπ‚ÇÄ {X : TopCat.{u}} : X ‚ü∂ X ‚äó I :=
  lift (ùüô X) (ofHom ‚ü®_, continuous_const (y := 0)‚ü©)

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_comp {X Y : TopCat.{u}} (f : X ‚ü∂ Y) :
    Œπ‚ÇÄ ‚â´ f ‚ñ∑ _ = f ‚â´ Œπ‚ÇÄ := rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_fst (X : TopCat.{u}) : Œπ‚ÇÄ ‚â´ fst X _ = ùüô X := rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_snd (X : TopCat.{u}) :
    Œπ‚ÇÄ ‚â´ snd X _ = ofHom ‚ü®_, continuous_const (y := 0)‚ü© :=
  rfl

@[simp]
lemma Œπ‚ÇÄ_apply {X : TopCat.{u}} (x : X) : Œπ‚ÇÄ x = ‚ü®x, 0‚ü© := rfl

noncomputable def Œπ‚ÇÅ {X : TopCat.{u}} : X ‚ü∂ X ‚äó I :=
  lift (ùüô X) (ofHom ‚ü®_, continuous_const (y := 1)‚ü©)

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_comp {X Y : TopCat.{u}} (f : X ‚ü∂ Y) :
    Œπ‚ÇÅ ‚â´ f ‚ñ∑ _ = f ‚â´ Œπ‚ÇÅ := rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_fst (X : TopCat.{u}) : Œπ‚ÇÅ ‚â´ fst X _ = ùüô X := rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_snd (X : TopCat.{u}) :
    Œπ‚ÇÅ ‚â´ snd X _ = ofHom ‚ü®_, continuous_const (y := 1)‚ü© :=
  rfl

@[simp]
lemma Œπ‚ÇÅ_apply {X : TopCat.{u}} (x : X) : Œπ‚ÇÅ x = ‚ü®x, 1‚ü© :=
  rfl

end TopCat
