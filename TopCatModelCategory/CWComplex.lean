import TopCatModelCategory.CellComplex
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Topology.Category.TopCat.Limits.Basic

universe u

/-open CategoryTheory Limits HomotopicalAlgebra

namespace TopCat

namespace RelativeCWComplex

noncomputable def disk (n : ‚Ñï) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.closedBall (0 : EuclideanSpace ‚Ñù <| Fin <| n) 1

-- for `n > 0`, this is a sphere
noncomputable def diskBoundary (n : ‚Ñï) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.sphere (0 : EuclideanSpace ‚Ñù <| Fin <| n) 1

scoped prefix:arg "ùîª " => disk
scoped prefix:arg "‚àÇùîª " => diskBoundary

def diskBoundaryInclusion (n : ‚Ñï) : ‚àÇùîª n ‚ü∂ ùîª n where
  toFun := fun ‚ü®p, hp‚ü© ‚Ü¶ ‚ü®p, le_of_eq hp‚ü©
  continuous_toFun := ‚ü®fun t ‚ü®s, ‚ü®r, hro, hrs‚ü©, hst‚ü© ‚Ü¶ by
    rw [isOpen_induced_iff, ‚Üê hst, ‚Üê hrs]
    tauto‚ü©

@[simp]
def basicCell (n : ‚Ñï) (_ : Unit) : ‚àÇùîª n ‚ü∂ ùîª n := diskBoundaryInclusion n

end RelativeCWComplex

open RelativeCWComplex in
abbrev RelativeCWComplex {X Y : TopCat.{u}} (f : X ‚ü∂ Y) := RelativeCellComplex basicCell f
abbrev CWComplex (X : TopCat.{u}) := RelativeCWComplex (initial.to X)

end TopCat-/
