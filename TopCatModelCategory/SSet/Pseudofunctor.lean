import TopCatModelCategory.SSet.FundamentalGroupoid
import Mathlib.CategoryTheory.Bicategory.Functor.LocallyDiscrete

universe u

namespace SSet

open CategoryTheory Bicategory HomotopicalAlgebra modelCategoryQuillen

abbrev KanComplexCat := CategoryTheory.FullSubcategory (C := SSet.{u})
  (fun X ‚Ü¶ IsFibrant X)

def KanComplexCat.mk (X : SSet.{u}) [IsFibrant X] : KanComplexCat := ‚ü®X, inferInstance‚ü©

namespace KanComplex

instance (X : KanComplexCat) : IsFibrant X.1 := X.2

namespace FundamentalGroupoid

lemma mapFundamentalGroupoid_associator {X Y Z T : SSet.{u}} [IsFibrant X] [IsFibrant Y]
    [IsFibrant Z] [IsFibrant T] (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ T) :
    (compMapFundamentalGroupoidIso (f ‚â´ g) h).hom ‚â´
    whiskerRight (compMapFundamentalGroupoidIso f g).hom _ ‚â´ (Functor.associator _ _ _).hom ‚â´
        whiskerLeft _ (compMapFundamentalGroupoidIso g h).inv ‚â´
          (compMapFundamentalGroupoidIso f (g ‚â´ h)).inv = ùüô _ := by
  ext x
  simp [compMapFundamentalGroupoidIso]

lemma mapFundamentalGroupoid_left_unitor {X Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) :
    (compMapFundamentalGroupoidIso (ùüô X) f).hom ‚â´
      whiskerRight (idMapFundamentalGroupoidIso X).hom _ ‚â´
        (Functor.leftUnitor (mapFundamentalGroupoid f)).hom =
      ùüô (mapFundamentalGroupoid f) := by
  ext x
  simp [compMapFundamentalGroupoidIso, compMapFundamentalGroupoidIso']
  rfl

lemma mapFundamentalGroupoid_right_unitor {X Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) :
    (compMapFundamentalGroupoidIso f (ùüô Y)).hom ‚â´
      whiskerLeft _ (idMapFundamentalGroupoidIso Y).hom ‚â´
        (Functor.rightUnitor (mapFundamentalGroupoid f)).hom =
      ùüô (mapFundamentalGroupoid f) := by
  ext x
  simp [compMapFundamentalGroupoidIso, compMapFundamentalGroupoidIso']
  rfl

noncomputable def pseudofunctor :
    Pseudofunctor (LocallyDiscrete (KanComplexCat.{u})) Cat.{u, u} :=
  pseudofunctorOfIsLocallyDiscrete
    (fun ‚ü®X‚ü© ‚Ü¶ Cat.of (FundamentalGroupoid X.1))
    (fun ‚ü®f‚ü© ‚Ü¶ mapFundamentalGroupoid f)
    (fun ‚ü®X‚ü© ‚Ü¶ idMapFundamentalGroupoidIso X.1)
    (fun ‚ü®f‚ü© ‚ü®g‚ü© ‚Ü¶ compMapFundamentalGroupoidIso f g)
    (fun ‚ü®f‚ü© ‚ü®g‚ü© ‚ü®h‚ü© ‚Ü¶ mapFundamentalGroupoid_associator f g h)
    (fun ‚ü®f‚ü© ‚Ü¶ mapFundamentalGroupoid_left_unitor f)
    (fun ‚ü®f‚ü© ‚Ü¶ mapFundamentalGroupoid_right_unitor f)

end FundamentalGroupoid

end KanComplex

end SSet
