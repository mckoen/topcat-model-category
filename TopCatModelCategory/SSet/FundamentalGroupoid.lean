import TopCatModelCategory.CommSq
import TopCatModelCategory.IsFibrant
import TopCatModelCategory.SSet.Square
import TopCatModelCategory.SSet.Horn
import TopCatModelCategory.SSet.HomotopyBasic
import TopCatModelCategory.SSet.AnodyneExtensionsDefs
import TopCatModelCategory.SSet.Monoidal

universe u

open HomotopicalAlgebra CategoryTheory Category Simplicial Limits MonoidalCategory
  ChosenFiniteProducts SSet.modelCategoryQuillen

namespace SSet

variable {X : SSet.{u}}

namespace boundary‚ÇÅ

lemma sq : Subcomplex.Sq ‚ä• (stdSimplex.face {0}) (stdSimplex.face {1})
    (boundary.{u} 1) where
  max_eq := by
    rw [boundary_eq_iSup]
    ext
    rw [Subpresheaf.max_obj, Set.mem_union, Subpresheaf.iSup_obj,
      Set.mem_iUnion]
    constructor
    ¬∑ rintro (h‚ÇÄ | h‚ÇÅ)
      ¬∑ exact ‚ü®1, h‚ÇÄ‚ü©
      ¬∑ exact ‚ü®0, h‚ÇÅ‚ü©
    ¬∑ rintro ‚ü®i, h‚ü©
      fin_cases i
      ¬∑ exact Or.inr h
      ¬∑ exact Or.inl h
  min_eq := by
    ext ‚ü®m‚ü© x
    induction' m using SimplexCategory.rec with m
    aesop

noncomputable def Œπ‚ÇÄ : Œî[0] ‚ü∂ (boundary 1 : SSet.{u}) :=
  (stdSimplex.isoOfRepresentableBy
    (stdSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 0))).hom ‚â´
    Subcomplex.homOfLE (face_le_boundary (1 : Fin 2))

noncomputable def Œπ‚ÇÅ : Œî[0] ‚ü∂ (boundary 1 : SSet.{u}) :=
  (stdSimplex.isoOfRepresentableBy
    (stdSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
    (Fin.orderIsoSingleton 1))).hom ‚â´
    Subcomplex.homOfLE (face_le_boundary (0 : Fin 2))

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_Œπ : Œπ‚ÇÄ.{u} ‚â´ (boundary 1).Œπ =
    stdSimplex.map (SimplexCategory.Œ¥ 1) := by
  apply yonedaEquiv.injective
  ext i
  fin_cases i
  rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_Œπ : Œπ‚ÇÅ.{u} ‚â´ (boundary 1).Œπ =
    stdSimplex.map (SimplexCategory.Œ¥ 0) := by
  apply yonedaEquiv.injective
  ext i
  fin_cases i
  rfl

lemma isPushout : IsPushout (initial.to _) (initial.to _) Œπ‚ÇÄ.{u} Œπ‚ÇÅ.{u} :=
  sq.{u}.isPushout.of_iso' (initialIsoIsInitial (Subcomplex.isInitialBot _))
    (stdSimplex.isoOfRepresentableBy
      (stdSimplex.faceRepresentableBy.{u} ({1}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 0)))
    (stdSimplex.isoOfRepresentableBy
      (stdSimplex.faceRepresentableBy.{u} ({0}·∂ú : Finset (Fin 2)) 0
      (Fin.orderIsoSingleton 1))) (Iso.refl _)
    (initialIsInitial.hom_ext _ _) (initialIsInitial.hom_ext _ _)
    (by simp [Œπ‚ÇÄ]) (by simp [Œπ‚ÇÅ])

noncomputable def isColimit : IsColimit (BinaryCofan.mk Œπ‚ÇÄ.{u} Œπ‚ÇÅ) :=
  isPushout.{u}.isColimitBinaryCofan initialIsInitial

@[ext]
lemma hom_ext {f g : (boundary 1 : SSet) ‚ü∂ X}
    (h‚ÇÄ : Œπ‚ÇÄ ‚â´ f = Œπ‚ÇÄ ‚â´ g) (h‚ÇÅ : Œπ‚ÇÅ ‚â´ f = Œπ‚ÇÅ ‚â´ g) : f = g := by
  apply BinaryCofan.IsColimit.hom_ext isColimit <;> assumption

noncomputable def desc (x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å) : (boundary 1 : SSet) ‚ü∂ X :=
  (BinaryCofan.IsColimit.desc' isColimit (yonedaEquiv.symm x‚ÇÄ)
    (yonedaEquiv.symm x‚ÇÅ)).1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÄ_desc (x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å) : Œπ‚ÇÄ ‚â´ desc x‚ÇÄ x‚ÇÅ = yonedaEquiv.symm x‚ÇÄ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.1

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_desc (x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å) : Œπ‚ÇÅ ‚â´ desc x‚ÇÄ x‚ÇÅ = yonedaEquiv.symm x‚ÇÅ :=
  (BinaryCofan.IsColimit.desc' isColimit _ _).2.2

noncomputable def isColimitRightTensor (X : SSet.{u}) :
    IsColimit (BinaryCofan.mk (Œπ‚ÇÄ ‚ñ∑ X) (Œπ‚ÇÅ ‚ñ∑ X)) :=
  mapIsColimitOfPreservesOfIsColimit (tensorRight X) _ _ isColimit

noncomputable def isColimitLeftTensor (X : SSet.{u}) :
    IsColimit (BinaryCofan.mk (X ‚óÅ Œπ‚ÇÄ) (X ‚óÅ Œπ‚ÇÅ)) :=
  mapIsColimitOfPreservesOfIsColimit (tensorLeft X) _ _ isColimit

lemma hom_ext_rightTensor {X Y : SSet.{u}} {f g : (boundary 1 : SSet) ‚äó X ‚ü∂ Y}
    (h‚ÇÄ : Œπ‚ÇÄ ‚ñ∑ X ‚â´ f = Œπ‚ÇÄ ‚ñ∑ X ‚â´ g) (h‚ÇÅ : Œπ‚ÇÅ ‚ñ∑ X ‚â´ f = Œπ‚ÇÅ ‚ñ∑ X ‚â´ g) :
    f = g := by
  apply BinaryCofan.IsColimit.hom_ext (isColimitRightTensor X) <;> assumption

end boundary‚ÇÅ

namespace KanComplex

variable (X)

structure FundamentalGroupoid where
  pt : X _‚¶ã0‚¶å

namespace FundamentalGroupoid

variable {X}

@[simps apply]
def objEquiv : FundamentalGroupoid X ‚âÉ X _‚¶ã0‚¶å where
  toFun x := x.pt
  invFun x := { pt := x}
  left_inv _ := rfl
  right_inv _ := rfl

@[simps! pt]
def map {Y : SSet.{u}} (f : X ‚ü∂ Y) (x : FundamentalGroupoid X) :
    FundamentalGroupoid Y :=
  objEquiv.symm (f.app _ (objEquiv x))

def Hom (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.HomotopyClass.{u} _ _
    (boundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

abbrev Edge (x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X) :=
  Subcomplex.RelativeMorphism.{u} _ _
    (boundary‚ÇÅ.desc x‚ÇÄ.pt x‚ÇÅ.pt ‚â´ (Subcomplex.topIso X).inv)

@[ext]
lemma Edge.ext {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} {p q : Edge x‚ÇÄ x‚ÇÅ}
    (h : p.map = q.map) :
    p = q :=
  Subcomplex.RelativeMorphism.ext h

@[simps]
def Edge.mk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (f : Œî[1] ‚ü∂ X)
    (h‚ÇÄ : stdSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ f = const x‚ÇÄ.pt := by simp)
    (h‚ÇÅ : stdSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ f = const x‚ÇÅ.pt := by simp) :
    Edge x‚ÇÄ x‚ÇÅ where
  map := f
  comm := by
    apply boundary‚ÇÅ.hom_ext
    ¬∑ dsimp
      rw [assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
        boundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc, h‚ÇÄ, FunctorToTypes.comp,
        Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe]
    ¬∑ dsimp
      rw [assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
        boundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc, h‚ÇÅ, FunctorToTypes.comp,
        Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe]

def Edge.ofEq {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (h : x‚ÇÄ = x‚ÇÅ) :
    Edge x‚ÇÄ x‚ÇÅ :=
  Edge.mk (const x‚ÇÄ.pt) rfl (by rw [h]; rfl)

@[reassoc]
lemma Edge.comm‚ÇÄ {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Edge x‚ÇÄ x‚ÇÅ) :
    stdSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ p.map = const x‚ÇÄ.pt := by
  have := boundary‚ÇÅ.Œπ‚ÇÄ ‚â´= p.comm
  rw [assoc, boundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe] at this
  exact this

@[reassoc]
lemma Edge.comm‚ÇÅ {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Edge x‚ÇÄ x‚ÇÅ) :
    stdSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ p.map = const x‚ÇÅ.pt := by
  have := boundary‚ÇÅ.Œπ‚ÇÅ ‚â´= p.comm
  rw [assoc, boundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe] at this
  exact this

@[simps! map]
def Edge.id (x : FundamentalGroupoid X) : Edge x x :=
  Edge.mk (const x.pt)

@[simp]
lemma Edge.ofEq_refl (x : FundamentalGroupoid x) :
    Edge.ofEq (rfl : x = x) = Edge.id x := rfl

namespace Edge

section

variable {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}

@[simps! map]
def pushforward (p : Edge x‚ÇÄ x‚ÇÅ) {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    Edge (x‚ÇÄ.map f) (x‚ÇÅ.map f) :=
  Edge.mk (p.map ‚â´ f) (by simp [p.comm‚ÇÄ_assoc])
    (by simp [p.comm‚ÇÅ_assoc])

@[simp]
lemma id_pushforward (x : FundamentalGroupoid X) {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    (Edge.id x).pushforward f = Edge.id (map f x) := by
  aesop

@[simp]
lemma pushforward_id (p : Edge x‚ÇÄ x‚ÇÅ) :
    p.pushforward (ùüô X) = p := by
  aesop

@[simp]
lemma pushforward_comp (p : Edge x‚ÇÄ x‚ÇÅ) {Y Z : SSet.{u}} (f : X ‚ü∂ Y)
    (g : Y ‚ü∂ Z) :
    p.pushforward (f ‚â´ g) = (p.pushforward f).pushforward g := by
  aesop

variable (p q : Edge x‚ÇÄ x‚ÇÅ)

nonrec abbrev Homotopy := p.Homotopy q

namespace Homotopy

variable {p q} (h : p.Homotopy q)

@[reassoc (attr := simp)]
lemma comm‚ÇÄ : Œπ‚ÇÄ ‚â´ (Œ≤_ _ _).hom ‚â´ h.h = const x‚ÇÄ.pt := by
  have := boundary‚ÇÅ.Œπ‚ÇÄ ‚ñ∑ Œî[1] ‚â´= h.rel
  rw [assoc, whiskerRight_fst_assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, comp_const, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe, ‚Üê comp_whiskerRight_assoc, boundary‚ÇÅ.Œπ‚ÇÄ_Œπ,
    ‚Üê cancel_epi (stdSimplex.leftUnitor _).inv,
    stdSimplex.leftUnitor_inv_map_Œ¥_one_assoc, comp_const] at this
  exact this

@[reassoc (attr := simp)]
lemma comm‚ÇÅ : Œπ‚ÇÅ ‚â´ (Œ≤_ _ _).hom ‚â´ h.h = const x‚ÇÅ.pt := by
  have := boundary‚ÇÅ.Œπ‚ÇÅ ‚ñ∑ Œî[1] ‚â´= h.rel
  rw [assoc, whiskerRight_fst_assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
    yonedaEquiv_symm_zero, const_comp, comp_const, FunctorToTypes.comp, Subpresheaf.Œπ_app,
    Subcomplex.topIso_inv_app_coe, ‚Üê comp_whiskerRight_assoc, boundary‚ÇÅ.Œπ‚ÇÅ_Œπ,
    ‚Üê cancel_epi (stdSimplex.leftUnitor _).inv,
    stdSimplex.leftUnitor_inv_map_Œ¥_zero_assoc, comp_const] at this
  exact this

@[simps]
noncomputable def map {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    (p.pushforward f).Homotopy (q.pushforward f) where
  h := h.h ‚â´ f
  rel := by
    rw [h.rel_assoc]
    congr 1
    apply boundary‚ÇÅ.hom_ext
    ¬∑ dsimp
      rw [assoc, assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
        boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc]
      apply yonedaEquiv.injective
      simp
    ¬∑ dsimp
      rw [assoc, assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
        boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc]
      apply yonedaEquiv.injective
      simp

end Homotopy

end

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : FundamentalGroupoid X}

structure CompStruct (p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) (p‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ) where
  map : Œî[2] ‚ü∂ X
  h‚ÇÄ‚ÇÅ : stdSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ map = p‚ÇÄ‚ÇÅ.map := by aesop_cat
  h‚ÇÅ‚ÇÇ : stdSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ map = p‚ÇÅ‚ÇÇ.map := by aesop_cat
  h‚ÇÄ‚ÇÇ : stdSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ map = p‚ÇÄ‚ÇÇ.map := by aesop_cat

namespace CompStruct

attribute [reassoc (attr := simp)] h‚ÇÄ‚ÇÅ h‚ÇÅ‚ÇÇ h‚ÇÄ‚ÇÇ

@[simps]
def pushforward {p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ}
    (h : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ)
    {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    CompStruct (p‚ÇÄ‚ÇÅ.pushforward f) (p‚ÇÅ‚ÇÇ.pushforward f) (p‚ÇÄ‚ÇÇ.pushforward f) where
  map := h.map ‚â´ f

def idComp (p : Edge x‚ÇÄ x‚ÇÅ) : CompStruct (Edge.id x‚ÇÄ) p p where
  map := stdSimplex.map (SimplexCategory.œÉ 0) ‚â´ p.map
  h‚ÇÄ‚ÇÅ := by
    have := SimplexCategory.Œ¥_comp_œÉ_of_gt (n := 0) (i := 1) (j := 0) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, p.comm‚ÇÄ, comp_const, id_map]
  h‚ÇÅ‚ÇÇ := by
    have := SimplexCategory.Œ¥_comp_œÉ_self (n := 1) (i := 0)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, CategoryTheory.Functor.map_id,
      CategoryTheory.Category.id_comp]
  h‚ÇÄ‚ÇÇ := by
    have := SimplexCategory.Œ¥_comp_œÉ_succ (n := 1) (i := 0)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, CategoryTheory.Functor.map_id,
      CategoryTheory.Category.id_comp]

def compId (p : Edge x‚ÇÄ x‚ÇÅ) : CompStruct p (Edge.id x‚ÇÅ) p where
  map := stdSimplex.map (SimplexCategory.œÉ 1) ‚â´ p.map
  h‚ÇÄ‚ÇÅ := by
    have := SimplexCategory.Œ¥_comp_œÉ_succ (n := 1) (i := 1)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, CategoryTheory.Functor.map_id, Category.id_comp]
  h‚ÇÅ‚ÇÇ := by
    have := SimplexCategory.Œ¥_comp_œÉ_of_le (n := 0) (i := 0) (j := 0) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, p.comm‚ÇÅ, comp_const, id_map]
  h‚ÇÄ‚ÇÇ := by
    have := SimplexCategory.Œ¥_comp_œÉ_self (n := 1) (i := 1)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, CategoryTheory.Functor.map_id, Category.id_comp]

variable [IsFibrant X]

lemma left_inverse (p : Edge x‚ÇÄ x‚ÇÅ) :
    ‚àÉ (q : Edge x‚ÇÅ x‚ÇÄ), Nonempty (CompStruct q p (Edge.id x‚ÇÅ)) := by
  obtain ‚ü®Œ±, h‚ÇÄ‚ÇÇ, h‚ÇÅ‚ÇÇ‚ü© := horn‚ÇÇ‚ÇÇ.isPushout.exists_desc (const x‚ÇÅ.pt) p.map
    (by rw [p.comm‚ÇÅ, comp_const])
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.horn_Œπ_mem 1 2)
  have h‚ÇÄ‚ÇÇ' := horn‚ÇÇ‚ÇÇ.Œπ‚ÇÄ‚ÇÇ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÄ‚ÇÇ] at h‚ÇÄ‚ÇÇ'
  have h‚ÇÅ‚ÇÇ' := horn‚ÇÇ‚ÇÇ.Œπ‚ÇÅ‚ÇÇ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÅ‚ÇÇ] at h‚ÇÅ‚ÇÇ'
  refine ‚ü®Edge.mk (stdSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ Œ≤) ?_ ?_,
    ‚ü®{ map := Œ≤, h‚ÇÄ‚ÇÅ := rfl, h‚ÇÅ‚ÇÇ := h‚ÇÅ‚ÇÇ', h‚ÇÄ‚ÇÇ := h‚ÇÄ‚ÇÇ' }‚ü©‚ü©
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 0) (i := 1)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, ‚Üê this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÇ', comp_const]
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 1) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÅ‚ÇÇ', p.comm‚ÇÄ]

lemma right_inverse (p : Edge x‚ÇÄ x‚ÇÅ) :
    ‚àÉ (q : Edge x‚ÇÅ x‚ÇÄ), Nonempty (CompStruct p q (Edge.id x‚ÇÄ)) := by
  obtain ‚ü®Œ±, h‚ÇÄ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© := horn‚ÇÇ‚ÇÄ.isPushout.exists_desc p.map (const x‚ÇÄ.pt)
    (by rw [p.comm‚ÇÄ, comp_const])
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.horn_Œπ_mem 1 0)
  have h‚ÇÄ‚ÇÅ' := horn‚ÇÇ‚ÇÄ.Œπ‚ÇÄ‚ÇÅ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÄ‚ÇÅ] at h‚ÇÄ‚ÇÅ'
  have h‚ÇÄ‚ÇÇ' := horn‚ÇÇ‚ÇÄ.Œπ‚ÇÄ‚ÇÇ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÅ‚ÇÇ] at h‚ÇÄ‚ÇÇ'
  refine ‚ü®Edge.mk (stdSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ Œ≤) ?_ ?_,
    ‚ü®{ map := Œ≤, h‚ÇÄ‚ÇÅ := h‚ÇÄ‚ÇÅ', h‚ÇÅ‚ÇÇ := rfl, h‚ÇÄ‚ÇÇ := h‚ÇÄ‚ÇÇ' }‚ü©‚ü©
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 1) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, ‚Üê this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÅ', p.comm‚ÇÅ]
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 0) (i := 0)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÇ', comp_const]

noncomputable def assoc {f‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {f‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {f‚ÇÇ‚ÇÉ : Edge x‚ÇÇ x‚ÇÉ}
    {f‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} {f‚ÇÅ‚ÇÉ : Edge x‚ÇÅ x‚ÇÉ} {f‚ÇÄ‚ÇÉ : Edge x‚ÇÄ x‚ÇÉ}
    (h‚ÇÄ‚ÇÇ : CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ)
    (h‚ÇÅ‚ÇÉ : CompStruct f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ)
    (h : CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ) :
    CompStruct f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÉ := by
  apply Nonempty.some
  obtain ‚ü®Œ±, hŒ±‚ÇÅ, hŒ±‚ÇÇ, hŒ±‚ÇÉ‚ü© :=
    horn‚ÇÉ‚ÇÅ.exists_desc h‚ÇÅ‚ÇÉ.map h.map h‚ÇÄ‚ÇÇ.map (by simp) (by simp) (by simp)
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.horn_Œπ_mem 2 1)
  exact ‚ü®{
    map := stdSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ Œ≤
    h‚ÇÄ‚ÇÅ := by
      have := SimplexCategory.Œ¥_comp_Œ¥ (n := 1) (i := 1) (j := 2) (by simp)
      dsimp at this
      rw [‚Üê h‚ÇÄ‚ÇÇ.h‚ÇÄ‚ÇÇ, ‚Üê hŒ±‚ÇÉ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this]
    h‚ÇÅ‚ÇÇ := by
      have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 1) (i := 0)
      dsimp at this
      rw [‚Üê h‚ÇÅ‚ÇÉ.h‚ÇÅ‚ÇÇ, ‚Üê hŒ±‚ÇÅ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this]
    h‚ÇÄ‚ÇÇ :=  by
      have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 1) (i := 1)
      dsimp at this
      rw [‚Üê h.h‚ÇÄ‚ÇÇ, ‚Üê hŒ±‚ÇÇ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this] }‚ü©

noncomputable def assoc' {f‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {f‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {f‚ÇÇ‚ÇÉ : Edge x‚ÇÇ x‚ÇÉ}
    {f‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} {f‚ÇÅ‚ÇÉ : Edge x‚ÇÅ x‚ÇÉ} {f‚ÇÄ‚ÇÉ : Edge x‚ÇÄ x‚ÇÉ}
    (h‚ÇÄ‚ÇÇ : CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ)
    (h‚ÇÅ‚ÇÉ : CompStruct f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ)
    (h : CompStruct f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÉ) :
    CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ := by
  apply Nonempty.some
  obtain ‚ü®Œ±, hŒ±‚ÇÅ, hŒ±‚ÇÇ, hŒ±‚ÇÉ‚ü© :=
    horn‚ÇÉ‚ÇÇ.exists_desc h‚ÇÅ‚ÇÉ.map h.map h‚ÇÄ‚ÇÇ.map (by simp) (by simp) (by simp)
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.horn_Œπ_mem 2 2)
  exact ‚ü®{
    map := stdSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ Œ≤
    h‚ÇÄ‚ÇÅ := by
      have := SimplexCategory.Œ¥_comp_Œ¥ (n := 1) (i := 2) (j := 2) (by simp)
      dsimp at this
      rw [‚Üê h‚ÇÄ‚ÇÇ.h‚ÇÄ‚ÇÅ, ‚Üê hŒ±‚ÇÉ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this]
    h‚ÇÅ‚ÇÇ := by
      have := SimplexCategory.Œ¥_comp_Œ¥ (n := 1) (i := 0) (j := 1) (by simp)
      dsimp at this
      rw [‚Üê h‚ÇÅ‚ÇÉ.h‚ÇÄ‚ÇÇ, ‚Üê hŒ±‚ÇÅ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this]
    h‚ÇÄ‚ÇÇ :=  by
      have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 1) (i := 1)
      dsimp at this
      rw [‚Üê h.h‚ÇÄ‚ÇÇ, ‚Üê hŒ±‚ÇÇ, ‚Üê hŒ≤, horn.Œπ_Œπ_assoc, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc, this] }‚ü©

end CompStruct

lemma exists_compStruct [IsFibrant X] (p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) :
    ‚àÉ (p‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ), Nonempty (CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) := by
  obtain ‚ü®Œ±, h‚ÇÄ‚ÇÅ, h‚ÇÅ‚ÇÇ‚ü© := horn‚ÇÇ‚ÇÅ.isPushout.exists_desc p‚ÇÄ‚ÇÅ.map p‚ÇÅ‚ÇÇ.map (by
    have h‚ÇÄ := boundary‚ÇÅ.Œπ‚ÇÅ ‚â´= p‚ÇÄ‚ÇÅ.comm
    have h‚ÇÅ := boundary‚ÇÅ.Œπ‚ÇÄ ‚â´= p‚ÇÅ‚ÇÇ.comm
    rw [assoc, boundary‚ÇÅ.Œπ‚ÇÅ_Œπ_assoc,
      boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc] at h‚ÇÄ
    rw [assoc, boundary‚ÇÅ.Œπ‚ÇÄ_Œπ_assoc,
      boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc] at h‚ÇÅ
    rw [h‚ÇÄ, h‚ÇÅ])
  obtain ‚ü®Œ≤, hŒ≤‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ±
    (anodyneExtensions.horn_Œπ_mem 1 1)
  have h‚ÇÄ‚ÇÅ' := horn‚ÇÇ‚ÇÅ.Œπ‚ÇÄ‚ÇÅ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÄ‚ÇÅ] at h‚ÇÄ‚ÇÅ'
  have h‚ÇÅ‚ÇÇ' := horn‚ÇÇ‚ÇÅ.Œπ‚ÇÅ‚ÇÇ ‚â´= hŒ≤
  rw [horn.Œπ_Œπ_assoc, h‚ÇÅ‚ÇÇ] at h‚ÇÅ‚ÇÇ'
  refine ‚ü®Edge.mk (stdSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ Œ≤) ?_ ?_,
    ‚ü®{ map := Œ≤, h‚ÇÄ‚ÇÅ := h‚ÇÄ‚ÇÅ', h‚ÇÅ‚ÇÇ := h‚ÇÅ‚ÇÇ', h‚ÇÄ‚ÇÇ := rfl }‚ü©‚ü©
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥_self (n := 0) (i := 1)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÄ‚ÇÅ', p‚ÇÄ‚ÇÅ.comm‚ÇÄ]
  ¬∑ have := SimplexCategory.Œ¥_comp_Œ¥ (n := 0) (i := 0) (j := 0) (by simp)
    dsimp at this
    rw [‚Üê Functor.map_comp_assoc, this, Functor.map_comp_assoc, h‚ÇÅ‚ÇÇ', p‚ÇÅ‚ÇÇ.comm‚ÇÅ]

def HomotopyL (p q : Edge x‚ÇÄ x‚ÇÅ) := CompStruct p (Edge.id x‚ÇÅ) q
def HomotopyR (p q : Edge x‚ÇÄ x‚ÇÅ) := CompStruct (Edge.id x‚ÇÄ) p q

section

variable (p q r : Edge x‚ÇÄ x‚ÇÅ)

def HomotopyL.refl : HomotopyL p p := CompStruct.compId p
def HomotopyR.refl : HomotopyR p p := CompStruct.idComp p

variable {p q r} [IsFibrant X]

noncomputable def HomotopyL.symm (h : HomotopyL p q) : HomotopyL q p :=
  CompStruct.assoc h (CompStruct.compId _) (CompStruct.compId p)

noncomputable def HomotopyR.symm (h : HomotopyR p q) : HomotopyR q p :=
  CompStruct.assoc' (CompStruct.idComp _) h (CompStruct.idComp p)

noncomputable def HomotopyL.homotopyR (h : HomotopyL p q) : HomotopyR p q :=
  HomotopyR.symm (CompStruct.assoc' (CompStruct.idComp p) h (CompStruct.compId p))

noncomputable def HomotopyR.homotopyL (h : HomotopyR p q) : HomotopyL p q :=
  HomotopyL.symm (CompStruct.assoc h (CompStruct.compId p) (CompStruct.idComp p))

noncomputable def HomotopyL.trans (h : HomotopyL p q) (h' : HomotopyL q r) :
    HomotopyL p r :=
  CompStruct.assoc (CompStruct.idComp p) h h'.homotopyR

noncomputable def HomotopyR.trans (h : HomotopyR p q) (h' : HomotopyR q r) :
    HomotopyR p r :=
  CompStruct.assoc' h (CompStruct.compId p) h'.homotopyL

end

namespace CompStruct

variable [IsFibrant X]

noncomputable def unique {p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ}
    (h : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ)
    {p‚ÇÄ‚ÇÅ' : Edge x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ' : Edge x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ' : Edge x‚ÇÄ x‚ÇÇ}
    (h' : CompStruct p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ')
    (h‚ÇÄ‚ÇÅ : HomotopyL p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ') (h‚ÇÅ‚ÇÇ : HomotopyL p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ') :
    HomotopyL p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' :=
  assoc h (compId p‚ÇÅ‚ÇÇ) (assoc (compId p‚ÇÄ‚ÇÅ) h‚ÇÅ‚ÇÇ.homotopyR (assoc' h‚ÇÄ‚ÇÅ (idComp p‚ÇÅ‚ÇÇ') h'))

end CompStruct

namespace Homotopy

variable {p q : Edge x‚ÇÄ x‚ÇÅ} (h : Homotopy p q)

lemma h_app_zero_of_fst_zero (x : Œî[1] _‚¶ã0‚¶å) :
    h.h.app _ (‚ü®stdSimplex.obj‚ÇÄEquiv.symm 0, x‚ü©) = x‚ÇÄ.pt := by
  have := (stdSimplex.leftUnitor _).inv ‚â´= boundary‚ÇÅ.Œπ‚ÇÄ ‚ñ∑ _ ‚â´= h.rel
  rw [Category.assoc, ChosenFiniteProducts.whiskerRight_fst_assoc,
    boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
    FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe,
    comp_const, comp_const, ‚Üê comp_whiskerRight_assoc,
    boundary‚ÇÅ.Œπ‚ÇÄ_Œπ, stdSimplex.leftUnitor_inv_map_Œ¥_one_assoc] at this
  replace this := congr_fun (NatTrans.congr_app this _) x
  dsimp at this
  rw [SimplexCategory.const_eq_id, op_id, FunctorToTypes.map_id_apply] at this
  exact this

lemma h_app_zero_of_fst_one (x : Œî[1] _‚¶ã0‚¶å) :
    h.h.app _ (‚ü®stdSimplex.obj‚ÇÄEquiv.symm 1, x‚ü©) = x‚ÇÅ.pt := by
  have := (stdSimplex.leftUnitor _).inv ‚â´= boundary‚ÇÅ.Œπ‚ÇÅ ‚ñ∑ _ ‚â´= h.rel
  rw [Category.assoc, ChosenFiniteProducts.whiskerRight_fst_assoc,
    boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc, yonedaEquiv_symm_zero, const_comp,
    FunctorToTypes.comp, Subpresheaf.Œπ_app, Subcomplex.topIso_inv_app_coe,
    comp_const, comp_const, ‚Üê comp_whiskerRight_assoc,
    boundary‚ÇÅ.Œπ‚ÇÅ_Œπ, stdSimplex.leftUnitor_inv_map_Œ¥_zero_assoc] at this
  replace this := congr_fun (NatTrans.congr_app this _) x
  dsimp at this
  rw [SimplexCategory.const_eq_id, op_id, FunctorToTypes.map_id_apply] at this
  exact this

@[simp]
lemma h_app_obj‚ÇÄEquiv_zero :
    h.h.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm 0) = x‚ÇÄ.pt := by
  apply h_app_zero_of_fst_zero

@[simp]
lemma h_app_obj‚ÇÄEquiv_one :
    h.h.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm 1) = x‚ÇÅ.pt := by
  apply h_app_zero_of_fst_one

noncomputable abbrev diagonal : Edge x‚ÇÄ x‚ÇÅ :=
  Edge.mk (square.diagonal ‚â´ h.h) (by simp) (by simp)

noncomputable def homotopyLDiagonal : HomotopyL p h.diagonal where
  map := square.ŒπTriangle‚ÇÄ ‚â´ h.h
  h‚ÇÄ‚ÇÅ := by rw [‚Üê h.h‚ÇÄ, square.Œ¥‚ÇÇ_ŒπTriangle‚ÇÄ_assoc]

noncomputable def homotopyRDiagonal : HomotopyR q h.diagonal where
  map := square.ŒπTriangle‚ÇÅ ‚â´ h.h

noncomputable def homotopyL [IsFibrant X] : HomotopyL p q :=
  h.homotopyLDiagonal.trans h.homotopyRDiagonal.homotopyL.symm

noncomputable def homotopyR [IsFibrant X] : HomotopyR p q :=
  h.homotopyL.homotopyR

end Homotopy

variable [IsFibrant X]

section

variable {p q : Edge x‚ÇÄ x‚ÇÅ}

noncomputable def HomotopyL.homotopy (h : p.HomotopyL q) : Homotopy p q where
  h := square.isPushout.desc h.map
      (stdSimplex.map (SimplexCategory.œÉ 0) ‚â´ q.map) (by
        have := SimplexCategory.Œ¥_comp_œÉ_succ (i := (0 : Fin 2))
        dsimp at this
        rw [h.h‚ÇÄ‚ÇÇ, ‚Üê Functor.map_comp_assoc, this,
          CategoryTheory.Functor.map_id, id_comp])
  h‚ÇÄ := by rw [‚Üê square.Œ¥‚ÇÇ_ŒπTriangle‚ÇÄ, assoc, IsPushout.inl_desc, h.h‚ÇÄ‚ÇÅ]
  h‚ÇÅ := by
    have := SimplexCategory.Œ¥_comp_œÉ_self (i := (0 : Fin 2))
    dsimp at this
    rw [‚Üê square.Œ¥‚ÇÄ_ŒπTriangle‚ÇÅ, assoc, IsPushout.inr_desc,
      ‚Üê Functor.map_comp_assoc, this, CategoryTheory.Functor.map_id, id_comp]
  rel := by
    apply boundary‚ÇÅ.hom_ext_rightTensor
    ¬∑ have := SimplexCategory.Œ¥_comp_œÉ_of_gt (n := 0) (i := 1) (j := 0) (by simp)
      dsimp at this ‚ä¢
      rw [assoc, Subcomplex.topIso_inv_Œπ, comp_id, whiskerRight_fst_assoc,
        boundary‚ÇÅ.Œπ‚ÇÄ_desc, yonedaEquiv_symm_zero, comp_const,
        ‚Üê MonoidalCategory.comp_whiskerRight_assoc,
        boundary‚ÇÅ.Œπ‚ÇÄ_Œπ, square.Œ¥‚ÇÅ_whiskerRight, assoc, assoc,
        IsPushout.inr_desc, ‚Üê Functor.map_comp_assoc, this,
        Functor.map_comp_assoc, q.comm‚ÇÄ, comp_const, comp_const]
    ¬∑ rw [assoc, Subcomplex.topIso_inv_Œπ, comp_id, whiskerRight_fst_assoc,
        boundary‚ÇÅ.Œπ‚ÇÅ_desc, yonedaEquiv_symm_zero, comp_const,
        ‚Üê MonoidalCategory.comp_whiskerRight_assoc,
        boundary‚ÇÅ.Œπ‚ÇÅ_Œπ, square.Œ¥‚ÇÄ_whiskerRight, assoc, assoc,
        IsPushout.inl_desc, h.h‚ÇÅ‚ÇÇ, id_map, comp_const]

noncomputable def HomotopyR.homotopy (h : p.Homotopy q) : Homotopy p q :=
  h.homotopyL.homotopy

end

noncomputable def compUniqueUpToHomotopy [IsFibrant X]
    {p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' : Edge x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' : Edge x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' : Edge x‚ÇÄ x‚ÇÇ}
    (s : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) (s' : CompStruct p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ')
    (h‚ÇÄ‚ÇÅ : p‚ÇÄ‚ÇÅ.Homotopy p‚ÇÄ‚ÇÅ') (h‚ÇÅ‚ÇÇ : p‚ÇÅ‚ÇÇ.Homotopy p‚ÇÅ‚ÇÇ') :
    p‚ÇÄ‚ÇÇ.Homotopy p‚ÇÄ‚ÇÇ' :=
  (CompStruct.unique s s' h‚ÇÄ‚ÇÅ.homotopyL h‚ÇÅ‚ÇÇ.homotopyL).homotopy

noncomputable def comp (p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) :
    Edge x‚ÇÄ x‚ÇÇ :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose

noncomputable def compStruct (p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) :
    CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ (p‚ÇÄ‚ÇÅ.comp p‚ÇÅ‚ÇÇ) :=
  (exists_compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).choose_spec.some

noncomputable def inv (p : Edge x‚ÇÄ x‚ÇÅ) : Edge x‚ÇÅ x‚ÇÄ :=
  (CompStruct.right_inverse p).choose

noncomputable def CompStruct.mulInv (p : Edge x‚ÇÄ x‚ÇÅ) : CompStruct p p.inv (id x‚ÇÄ) :=
  (CompStruct.right_inverse p).choose_spec.some

end Edge

def Hom.id (x : FundamentalGroupoid X) : Hom x x :=
  (Edge.id x).homotopyClass

def Hom.map {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}
    (p : Hom x‚ÇÄ x‚ÇÅ) {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    Hom (x‚ÇÄ.map f) (x‚ÇÅ.map f) :=
  p.postcomp (Subcomplex.RelativeMorphism.ofHom f) (by
    apply boundary‚ÇÅ.hom_ext
    ¬∑ dsimp
      rw [assoc, boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
        boundary‚ÇÅ.Œπ‚ÇÄ_desc_assoc,
        yonedaEquiv_symm_zero, yonedaEquiv_symm_zero,
        Iso.inv_hom_id_assoc, const_comp,
        FunctorToTypes.comp, const_comp]
    ¬∑ dsimp
      rw [assoc, boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
        boundary‚ÇÅ.Œπ‚ÇÅ_desc_assoc,
        yonedaEquiv_symm_zero, yonedaEquiv_symm_zero,
        Iso.inv_hom_id_assoc, const_comp,
        FunctorToTypes.comp, const_comp])

@[simp]
lemma Hom.mapHomotopyClass {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}
    (p : Edge x‚ÇÄ x‚ÇÅ) {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    Hom.map p.homotopyClass f = (p.pushforward f).homotopyClass :=
  rfl

lemma Hom.id_map (x : FundamentalGroupoid X)
    {Y : SSet.{u}} (f : X ‚ü∂ Y) :
    (Hom.id x).map f = Hom.id (x.map f) := by
  simp [Hom.id]

lemma Hom.homotopyClass_surjective
    {x y : FundamentalGroupoid X} (f : Hom x y) :
    ‚àÉ (p : Edge x y), p.homotopyClass = f :=
  Quot.mk_surjective f

@[simp]
lemma Hom.map_id {x y : FundamentalGroupoid X} (f : Hom x y) :
    Hom.map f (ùüô X) = f := by
  obtain ‚ü®p, rfl‚ü© := homotopyClass_surjective f
  simp

@[simp]
lemma Hom.map_comp {x y : FundamentalGroupoid X} (f : Hom x y)
    {Y Z : SSet.{u}} (g : X ‚ü∂ Y) (h : Y ‚ü∂ Z) :
    Hom.map f (g ‚â´ h) = Hom.map (Hom.map f g) h := by
  obtain ‚ü®p, rfl‚ü© := homotopyClass_surjective f
  simp

variable [IsFibrant X]

noncomputable def Hom.comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X} (f : Hom x‚ÇÄ x‚ÇÅ) (g : Hom x‚ÇÅ x‚ÇÇ) :
    Hom x‚ÇÄ x‚ÇÇ := by
  refine Quot.lift‚ÇÇ (fun p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ ‚Ü¶ (Edge.comp p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).homotopyClass) ?_ ?_ f g
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ' ‚ü®h‚ü©
    exact (Edge.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ') (.refl _) h).eq
  ¬∑ rintro p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ ‚ü®h‚ü©
    exact (Edge.compUniqueUpToHomotopy (p‚ÇÄ‚ÇÅ.compStruct p‚ÇÅ‚ÇÇ)
      (p‚ÇÄ‚ÇÅ'.compStruct p‚ÇÅ‚ÇÇ) h (.refl _)).eq

noncomputable instance : CategoryStruct (FundamentalGroupoid X) where
  Hom := Hom
  id := Hom.id
  comp := Hom.comp

def homMk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Edge x‚ÇÄ x‚ÇÅ) :
    x‚ÇÄ ‚ü∂ x‚ÇÅ :=
  p.homotopyClass

@[simp]
lemma homMk_refl (x : FundamentalGroupoid X) :
    homMk (Edge.id x) = ùüô x := rfl

lemma homMk_eq_of_homotopy {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X}
    {p q : Edge x‚ÇÄ x‚ÇÅ} (h : p.Homotopy q) :
    homMk p = homMk q :=
  h.eq

@[simp]
lemma map_homMk {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : Edge x‚ÇÄ x‚ÇÅ)
    {Y : SSet.{u}} [IsFibrant Y] (f : X ‚ü∂ Y) :
    Hom.map (homMk p) f = homMk (p.pushforward f) := rfl

variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}

lemma homMk_surjective : Function.Surjective (homMk (x‚ÇÄ := x‚ÇÄ) (x‚ÇÅ := x‚ÇÅ)) := by
  apply Quot.mk_surjective

lemma Edge.CompStruct.fac {x‚ÇÄ x‚ÇÅ x‚ÇÇ : FundamentalGroupoid X}
    {p‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {p‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {p‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ}
    (h : CompStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ) : homMk p‚ÇÄ‚ÇÅ ‚â´ homMk p‚ÇÅ‚ÇÇ = homMk p‚ÇÄ‚ÇÇ :=
  homMk_eq_of_homotopy (compUniqueUpToHomotopy (Edge.compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ)
    h (.refl _) (.refl _))

noncomputable instance : Category (FundamentalGroupoid X) where
  id_comp f := by
    obtain ‚ü®p, rfl‚ü© := homMk_surjective f
    exact (Edge.CompStruct.idComp p).fac
  comp_id f:= by
    obtain ‚ü®p, rfl‚ü© := homMk_surjective f
    exact (Edge.CompStruct.compId p).fac
  assoc {x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ} f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ := by
    obtain ‚ü®p‚ÇÄ‚ÇÅ, rfl‚ü© := homMk_surjective f‚ÇÄ‚ÇÅ
    obtain ‚ü®p‚ÇÅ‚ÇÇ, rfl‚ü© := homMk_surjective f‚ÇÅ‚ÇÇ
    obtain ‚ü®p‚ÇÇ‚ÇÉ, rfl‚ü© := homMk_surjective f‚ÇÇ‚ÇÉ
    exact (Edge.CompStruct.assoc (Edge.compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ)
      (Edge.compStruct p‚ÇÅ‚ÇÇ p‚ÇÇ‚ÇÉ) (Edge.compStruct p‚ÇÄ‚ÇÅ (p‚ÇÅ‚ÇÇ.comp p‚ÇÇ‚ÇÉ))).fac

@[reassoc (attr := simp)]
lemma homMk_comp_homMk_inv (p : Edge x‚ÇÄ x‚ÇÅ) :
    homMk p ‚â´ homMk p.inv = ùüô _ :=
  (Edge.CompStruct.mulInv p).fac

noncomputable instance : Groupoid (FundamentalGroupoid X) :=
  Groupoid.ofIsIso (fun {x‚ÇÄ x‚ÇÅ} f ‚Ü¶ by
    obtain ‚ü®p, hp‚ü© := homMk_surjective f
    have ‚ü®g, hg‚ü© : ‚àÉ g, f ‚â´ g = ùüô x‚ÇÄ := by
      obtain ‚ü®q, ‚ü®hq‚ü©‚ü© := Edge.CompStruct.right_inverse p
      exact ‚ü®homMk q, by rw [‚Üê hp, hq.fac, homMk_refl]‚ü©
    have ‚ü®g', hg'‚ü© : ‚àÉ g', g' ‚â´ f = ùüô x‚ÇÅ := by
      obtain ‚ü®q, ‚ü®hq‚ü©‚ü© := Edge.CompStruct.left_inverse p
      exact ‚ü®homMk q, by rw [‚Üê hp, hq.fac, homMk_refl]‚ü©
    obtain rfl : g = g' := by
      replace hg := g' ‚â´= hg
      replace hg' := hg' =‚â´ g
      rw [comp_id] at hg
      rw [assoc, id_comp] at hg'
      rw [‚Üê hg', hg]
    exact ‚ü®g, hg, hg'‚ü©)

-- why is not this automatic...???
instance {x y : FundamentalGroupoid X} (f : x ‚ü∂ y) : IsIso f :=
  ((Groupoid.isoEquivHom _ _).symm f).isIso_hom

instance {x y : FundamentalGroupoid X} (f : x ‚ü∂ y) : Epi f where
  left_cancellation g‚ÇÅ g‚ÇÇ h := by
    have : ùüô _ ‚â´ g‚ÇÅ = ùüô _ ‚â´ g‚ÇÇ := by
      rw [‚Üê IsIso.inv_hom_id f, Category.assoc, Category.assoc, h]
    simpa using this

instance {x y : FundamentalGroupoid X} (f : x ‚ü∂ y) : Mono f where
  right_cancellation g‚ÇÅ g‚ÇÇ h := by
    have : g‚ÇÅ ‚â´ ùüô _ = g‚ÇÇ ‚â´ ùüô _ := by
      rw [‚Üê IsIso.hom_inv_id f, reassoc_of% h]
    simpa using this

@[reassoc (attr := simp)]
lemma homMk_inv_comp_homMk (p : Edge x‚ÇÄ x‚ÇÅ) :
    homMk p.inv ‚â´ homMk p = ùüô _ := by
  rw [‚Üê cancel_epi (homMk p), homMk_comp_homMk_inv_assoc, comp_id]

@[simp]
lemma Hom.ofEq_map {x y : FundamentalGroupoid X} (h : x = y) {Y : SSet.{u}} [IsFibrant Y]
    (f : X ‚ü∂ Y) :
    Hom.map (eqToHom h) f = eqToHom (show x.map f = y.map f by rw [h]) := by
  subst h
  apply Hom.id_map

end FundamentalGroupoid

open FundamentalGroupoid

variable {X} {Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y)

@[simps]
def mapFundamentalGroupoid :
    FundamentalGroupoid X ‚•§ FundamentalGroupoid Y where
  obj x := x.map f
  map {x‚ÇÄ x‚ÇÅ} g := g.map f
  map_id x := by
    simp only [‚Üê homMk_refl, map_homMk, Edge.id_pushforward]
  map_comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ} f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ := by
    dsimp only
    obtain ‚ü®p‚ÇÄ‚ÇÅ, rfl‚ü© := homMk_surjective f‚ÇÄ‚ÇÅ
    obtain ‚ü®p‚ÇÅ‚ÇÇ, rfl‚ü© := homMk_surjective f‚ÇÅ‚ÇÇ
    exact ((Edge.compStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ).pushforward f).fac.symm

variable {f}
noncomputable def congrMapFundamentalGroupoid {g : X ‚ü∂ Y} (h : f = g) :
    mapFundamentalGroupoid f ‚âÖ mapFundamentalGroupoid g :=
  NatIso.ofComponents (fun x ‚Ü¶ eqToIso (by rw [h]))

variable (X) in
@[simps!]
noncomputable def idMapFundamentalGroupoidIso :
    mapFundamentalGroupoid (ùüô X) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _)

variable (f) {Z : SSet.{u}} [IsFibrant Z] (g : Y ‚ü∂ Z)

@[simps!]
noncomputable def compMapFundamentalGroupoidIso'
    (fg : X ‚ü∂ Z) (hfg : f ‚â´ g = fg) :
    mapFundamentalGroupoid fg ‚âÖ
      mapFundamentalGroupoid f ‚ãô mapFundamentalGroupoid g :=
  NatIso.ofComponents
    (fun _ ‚Ü¶ eqToIso (by rw [‚Üê hfg]; rfl))
    (fun f ‚Ü¶ by subst hfg; simp)

@[simps!]
noncomputable def compMapFundamentalGroupoidIso :
    mapFundamentalGroupoid (f ‚â´ g) ‚âÖ
      mapFundamentalGroupoid f ‚ãô mapFundamentalGroupoid g :=
  compMapFundamentalGroupoidIso' f g (f ‚â´ g) rfl

noncomputable def FundamentalGroupoid.equivalenceOfIso
    [IsFibrant X] [IsFibrant Y] (e : X ‚âÖ Y) :
    FundamentalGroupoid X ‚âå FundamentalGroupoid Y where
  functor := mapFundamentalGroupoid e.hom
  inverse := mapFundamentalGroupoid e.inv
  unitIso := (idMapFundamentalGroupoidIso X).symm ‚â™‚â´
    compMapFundamentalGroupoidIso' _ _ _ e.hom_inv_id
  counitIso := (compMapFundamentalGroupoidIso' _ _ _ e.inv_hom_id).symm ‚â™‚â´
    idMapFundamentalGroupoidIso Y
  functor_unitIso_comp x := by
    dsimp
    rw [comp_id]
    erw [id_comp]
    rw [Hom.ofEq_map, eqToHom_trans, eqToHom_refl]

instance [IsIso f] [IsFibrant X] [IsFibrant Y] :
    (mapFundamentalGroupoid f).IsEquivalence :=
  (FundamentalGroupoid.equivalenceOfIso (asIso f)).isEquivalence_functor

end KanComplex

end SSet
