import TopCatModelCategory.SSet.NonDegenerateProdSimplex
import TopCatModelCategory.SSet.Monoidal

universe u

open CategoryTheory Simplicial MonoidalCategory

lemma Fin.range‚ÇÅ {Œ± : Type*} (f : Fin 1 ‚Üí Œ±) :
    Set.range f = {f 0} := Set.range_unique

lemma Fin.range_eq_insert {Œ± : Type*} (f : Fin (n + 1) ‚Üí Œ±) :
    Set.range f =
      Insert.insert (f 0) (Set.range (fun (i : Fin n) ‚Ü¶ f i.succ))  := by
  ext x
  simp only [Set.mem_range, Set.mem_insert_iff]
  constructor
  ¬∑ rintro ‚ü®i, rfl‚ü©
    obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ <;> aesop
  ¬∑ aesop

lemma Fin.range‚ÇÇ {Œ± : Type*} (f : Fin 2 ‚Üí Œ±) :
    Set.range f = {f 0, f 1} := by
  simp [Fin.range_eq_insert, Fin.range‚ÇÅ]

lemma Fin.range‚ÇÉ {Œ± : Type*} (f : Fin 3 ‚Üí Œ±) :
    Set.range f = {f 0, f 1, f 2} := by
  simp [Fin.range_eq_insert, Fin.range‚ÇÇ]

namespace SSet

namespace square

open ChosenFiniteProducts

noncomputable def ŒπTriangle‚ÇÄ : (Œî[2] : SSet.{u}) ‚ü∂ Œî[1] ‚äó Œî[1] :=
  (yonedaEquiv _ _ ).symm (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 0).1

noncomputable def ŒπTriangle‚ÇÅ : (Œî[2] : SSet.{u}) ‚ü∂ Œî[1] ‚äó Œî[1] :=
  (yonedaEquiv _ _ ).symm (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 1).1

noncomputable def diagonal : Œî[1] ‚ü∂ Œî[1] ‚äó Œî[1] := lift (ùüô _) (ùüô _)

@[reassoc (attr := simp)]
lemma diagonal_fst : diagonal.{u} ‚â´ fst _ _ = ùüô _ := by simp [diagonal]

@[reassoc (attr := simp)]
lemma diagonal_snd : diagonal.{u} ‚â´ snd _ _ = ùüô _ := by simp [diagonal]

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÄ_diagonal :
    standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ diagonal =
      const (prodStandardSimplex.obj‚ÇÄEquiv.symm ‚ü®1, 1‚ü©) := by
  apply (yonedaEquiv _ _).injective
  apply Prod.ext <;> exact standardSimplex.obj‚ÇÄEquiv.injective (by rfl)

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÅ_diagonal :
    standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ diagonal =
      const (prodStandardSimplex.obj‚ÇÄEquiv.symm ‚ü®0, 0‚ü©) := by
  apply (yonedaEquiv _ _).injective
  apply Prod.ext <;> exact standardSimplex.obj‚ÇÄEquiv.injective (by rfl)

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÄ_ŒπTriangle‚ÇÄ :
    standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ square.ŒπTriangle‚ÇÄ = Œπ‚ÇÅ ‚â´ (Œ≤_ _ _).hom := by
  dsimp [ŒπTriangle‚ÇÄ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÅ_ŒπTriangle‚ÇÄ :
    standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ square.ŒπTriangle‚ÇÄ = diagonal := by
  dsimp [ŒπTriangle‚ÇÄ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÇ_ŒπTriangle‚ÇÄ : standardSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ square.ŒπTriangle‚ÇÄ = Œπ‚ÇÄ := by
  dsimp [ŒπTriangle‚ÇÄ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÄ_ŒπTriangle‚ÇÅ : standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ square.ŒπTriangle‚ÇÅ = Œπ‚ÇÅ := by
  dsimp [ŒπTriangle‚ÇÅ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÅ_ŒπTriangle‚ÇÅ :
    standardSimplex.map (SimplexCategory.Œ¥ 1) ‚â´ square.ŒπTriangle‚ÇÅ = diagonal := by
  dsimp [ŒπTriangle‚ÇÅ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc (attr := simp)]
lemma Œ¥‚ÇÇ_ŒπTriangle‚ÇÅ :
    standardSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ square.ŒπTriangle‚ÇÅ = Œπ‚ÇÄ ‚â´ (Œ≤_ _ _).hom := by
  dsimp [ŒπTriangle‚ÇÅ]
  rw [standardSimplex.map_comp_yonedaEquiv_symm]
  apply (SSet.yonedaEquiv _ _).injective
  apply prodStandardSimplex.objEquiv.injective
  rw [Equiv.apply_symm_apply]
  ext x : 3 <;> fin_cases x <;> rfl

@[reassoc]
lemma Œ¥‚ÇÅ_whiskerRight :
    standardSimplex.{u}.map (SimplexCategory.Œ¥ (1 : Fin 2)) ‚ñ∑ Œî[1] =
      snd _ _ ‚â´ standardSimplex.map (SimplexCategory.Œ¥ 2) ‚â´ ŒπTriangle‚ÇÅ := by
  rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv]
  apply (yonedaEquiv _ _ ).injective
  apply Prod.ext <;> ext i <;> fin_cases i <;> rfl

@[reassoc]
lemma Œ¥‚ÇÄ_whiskerRight :
    standardSimplex.{u}.map (SimplexCategory.Œ¥ (0 : Fin 2)) ‚ñ∑ Œî[1] =
      snd _ _ ‚â´ standardSimplex.map (SimplexCategory.Œ¥ 0) ‚â´ ŒπTriangle‚ÇÄ := by
  rw [‚Üê cancel_epi (standardSimplex.leftUnitor _).inv]
  apply (yonedaEquiv _ _ ).injective
  apply Prod.ext <;> ext i <;> fin_cases i <;> rfl

noncomputable abbrev diagonalSimplex : (Œî[1] ‚äó Œî[1] : SSet.{u}).NonDegenerate 1 :=
  ‚ü®yonedaEquiv _ _ diagonal, by
    rw [prodStandardSimplex.non_degenerate_iff']
    intro x y h
    simpa using congr_arg Prod.fst h‚ü©

lemma range_objEquiv_nonDegenerateEquiv‚ÇÅ_zero :
    Set.range (prodStandardSimplex.objEquiv
      (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 0).1) =
        {(0,0), (1, 0), (1, 1)} :=
  Fin.range‚ÇÉ _

lemma range_objEquiv_nonDegenerateEquiv‚ÇÅ_one :
    Set.range (prodStandardSimplex.objEquiv
      (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 1).1) =
        {(0,0), (0, 1), (1, 1)} :=
  Fin.range‚ÇÉ _

lemma range_objEquiv_diagonalSimplex :
    Set.range (prodStandardSimplex.objEquiv diagonalSimplex.1) = {(0, 0), (1, 1)} := by
  rw [Fin.range‚ÇÇ]
  rfl

lemma range_objEquiv_diagonalSimplex_eq_inter :
    Set.range (prodStandardSimplex.objEquiv diagonalSimplex.1) =
    Set.range (prodStandardSimplex.objEquiv
      (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 0).1) ‚à©
    Set.range (prodStandardSimplex.objEquiv
      (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 1).1) := by
  rw [range_objEquiv_nonDegenerateEquiv‚ÇÅ_zero,
    range_objEquiv_nonDegenerateEquiv‚ÇÅ_one,
    range_objEquiv_diagonalSimplex]
  ext x
  fin_cases x <;> simp

open Subcomplex

lemma sq : Sq (ofSimplex.{u} (yonedaEquiv _ _ diagonal))
    (ofSimplex (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ 0).1)
    (ofSimplex (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ 1).1)
    (‚ä§ : (Œî[1] ‚äó Œî[1]).Subcomplex) where
  max_eq := by
    rw [prodStandardSimplex.subcomplex_eq_top_iff _ rfl]
    intro x hx
    obtain ‚ü®i, hi‚ü© := prodStandardSimplex.nonDegenerateEquiv‚ÇÅ.surjective ‚ü®x, hx‚ü©
    rw [Subtype.ext_iff] at hi
    dsimp at hi
    subst hi
    rw [Subpresheaf.max_obj, Set.mem_union]
    fin_cases i
    ¬∑ exact Or.inl (mem_ofSimplex_obj _)
    ¬∑ exact Or.inr (mem_ofSimplex_obj _)
  min_eq := by
    ext ‚ü®k‚ü© x
    induction' k using SimplexCategory.rec with k
    obtain ‚ü®x, rfl‚ü© := prodStandardSimplex.objEquiv.symm.surjective x
    dsimp
    simp only [Set.mem_inter_iff, prodStandardSimplex.mem_ofSimplex_iff,
      Equiv.apply_symm_apply]
    rw [range_objEquiv_diagonalSimplex_eq_inter, Set.subset_inter_iff]

lemma isPushout :
    IsPushout (standardSimplex.{u}.map (SimplexCategory.Œ¥ 1))
      (standardSimplex.map (SimplexCategory.Œ¥ 1)) square.ŒπTriangle‚ÇÄ
      square.ŒπTriangle‚ÇÅ := by
  fapply sq.{u}.isPushout.of_iso'
    (prodStandardSimplex.isoOfNonDegenerate.{u} diagonalSimplex)
    (prodStandardSimplex.isoOfNonDegenerate.{u}
        (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 0))
    (prodStandardSimplex.isoOfNonDegenerate.{u}
        (prodStandardSimplex.nonDegenerateEquiv‚ÇÅ (q := 1) 1))
    (topIso (Œî[1] ‚äó Œî[1])).symm
  all_goals try apply Subcomplex.hom_ext _ rfl
  all_goals
    apply Subcomplex.hom_ext
    dsimp
    rw [Category.assoc, Category.assoc, homOfLE_Œπ,
      prodStandardSimplex.isoOfNonDegenerate_hom_Œπ,
      prodStandardSimplex.isoOfNonDegenerate_hom_Œπ,
      ‚Üê yonedaEquiv_symm_Œ¥]
    congr 1
    apply Prod.ext <;> ext i <;> fin_cases i <;> rfl

end square

end SSet
