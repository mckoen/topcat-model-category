import TopCatModelCategory.SSet.PtSimplex

open HomotopicalAlgebra CategoryTheory Simplicial Limits Opposite
  SSet.modelCategoryQuillen

universe u

namespace SSet

namespace KanComplex

def œÄ (n : ‚Ñï) (X : SSet.{u}) (x : X _‚¶ã0‚¶å) : Type u :=
  Subcomplex.RelativeMorphism.HomotopyClass
    (boundary n) (Subcomplex.ofSimplex x)
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)

def œÄ.mk {n : ‚Ñï} {X : SSet.{u}} {x : X _‚¶ã0‚¶å}
  (f : X.PtSimplex n x) : œÄ n X x := f.homotopyClass

lemma œÄ.mk_surjective {n : ‚Ñï} {X : SSet.{u}} {x : X _‚¶ã0‚¶å} :
    Function.Surjective (œÄ.mk : _ ‚Üí œÄ n X x) :=
  Quot.mk_surjective

instance (n : ‚Ñï) (X : SSet.{u}) (x : X _‚¶ã0‚¶å) : One (œÄ n X x) where
  one := Subcomplex.RelativeMorphism.const.homotopyClass

section

variable {X Y : SSet.{u}} (f : X ‚ü∂ Y) (n : ‚Ñï)
  (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : f.app _ x = y)

def mapœÄ (p : œÄ n X x) : œÄ n Y y :=
  p.postcomp (.ofSimplex‚ÇÄ f x y h) (by rw [comp_const])

@[simp]
lemma mapœÄ_mk (z : X.PtSimplex n x) :
    mapœÄ f n x y h (œÄ.mk z) = œÄ.mk (z.pushforward f y h) := rfl

variable {Z : SSet.{u}} (g : Y ‚ü∂ Z) (z : Z _‚¶ã0‚¶å) (h' : g.app _ y = z)

lemma mapœÄ_mapœÄ (p : œÄ n X x) :
    mapœÄ g n y z h' (mapœÄ f n x y h p) =
      mapœÄ (f ‚â´ g) n x z (by simp [h, h']) p := by
  obtain ‚ü®h, rfl‚ü© := p.eq_homotopyClass
  rfl

lemma mapœÄ_comp_mapœÄ :
    mapœÄ g n y z h' ‚àò mapœÄ f n x y h = mapœÄ (f ‚â´ g) n x z (by simp [h, h']) := by
  ext
  apply mapœÄ_mapœÄ

@[simp]
lemma mapœÄ_id (p : œÄ n X x) :
    mapœÄ (ùüô X) n x x rfl p = p := by
  obtain ‚ü®h, rfl‚ü© := p.eq_homotopyClass
  rfl

def mapœÄEquivOfIso (e : X ‚âÖ Y) (n : ‚Ñï) (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : e.hom.app _ x = y) :
    œÄ n X x ‚âÉ œÄ n Y y where
  toFun := mapœÄ e.hom n x y h
  invFun := mapœÄ e.inv n y x (by simp [‚Üê h])
  left_inv _ := by simp [mapœÄ_mapœÄ]
  right_inv _ := by simp [mapœÄ_mapœÄ]

end

namespace œÄ

variable {X : SSet.{u}}  {x : X _‚¶ã0‚¶å} {n : ‚Ñï} [IsFibrant X]

-- assume we do not already not that the general homotopy relation
-- is an equivalence relation
lemma mk_eq_mk_iff {p q : X.PtSimplex n x} :
    mk p = mk q ‚Üî Nonempty (p.RelStruct‚ÇÄ q) := by
  apply Quot.eq.trans
  constructor
  ¬∑ intro r
    induction r with
    | rel p q h =>
      change Nonempty (p.Homotopy q) at h
      exact ‚ü®h.some.relStruct‚ÇÄ‚ü©
    | refl p => exact ‚ü®.refl _‚ü©
    | symm _ _ _ h => exact ‚ü®h.some.symm‚ü©
    | trans _ _ _ _ _ h‚ÇÅ h‚ÇÇ => exact ‚ü®h‚ÇÅ.some.trans h‚ÇÇ.some‚ü©
  ¬∑ rintro ‚ü®h‚ü©
    exact Relation.EqvGen.rel _ _ ‚ü®h.homotopy‚ü©

lemma mk_eq_one_iff (p : X.PtSimplex n x) :
    mk p = 1 ‚Üî Nonempty (p.RelStruct‚ÇÄ .const) :=
  mk_eq_mk_iff

noncomputable def mul' (p q : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    X.PtSimplex (n + 1) x :=
  (PtSimplex.MulStruct.nonempty p q i).choose

noncomputable def mulStruct (p q : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    PtSimplex.MulStruct p q (mul' p q i) i :=
  (PtSimplex.MulStruct.nonempty p q i).choose_spec.some

noncomputable def mul (i : Fin (n + 1)) (g‚ÇÅ g‚ÇÇ : œÄ (n + 1) X x) : œÄ (n + 1) X x := by
  refine Quot.lift‚ÇÇ (fun p q ‚Ü¶ mk (mul' p q i)) ?_ ?_ g‚ÇÅ g‚ÇÇ
  ¬∑ rintro p q q' ‚ü®h : q.Homotopy q'‚ü©
    rw [mk_eq_mk_iff]
    exact ‚ü®PtSimplex.MulStruct.unique (mulStruct p q i) (mulStruct p q' i)
      (.refl p) h.relStruct‚ÇÄ‚ü©
  ¬∑ rintro p p' q ‚ü®h : p.Homotopy p'‚ü©
    rw [mk_eq_mk_iff]
    exact ‚ü®PtSimplex.MulStruct.unique (mulStruct p q i) (mulStruct p' q i)
      h.relStruct‚ÇÄ (.refl q)‚ü©

lemma mul_eq_of_mulStruct {g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : X.PtSimplex (n + 1) x} {i : Fin (n + 1)}
    (h : PtSimplex.MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ i) : mul i (mk g‚ÇÅ) (mk g‚ÇÇ) = mk g‚ÇÅ‚ÇÇ := by
  change mk _ = mk _
  rw [mk_eq_mk_iff]
  exact ‚ü®PtSimplex.MulStruct.unique (mulStruct g‚ÇÅ g‚ÇÇ i) h (.refl g‚ÇÅ) (.refl g‚ÇÇ)‚ü©

lemma mul_mk_eq_iff {g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ : X.PtSimplex (n + 1) x} {i : Fin (n + 1)} :
    mul i (mk g‚ÇÅ) (mk g‚ÇÇ) = mk g‚ÇÅ‚ÇÇ ‚Üî
      Nonempty (PtSimplex.MulStruct g‚ÇÅ g‚ÇÇ g‚ÇÅ‚ÇÇ i) := by
  constructor
  ¬∑ intro h
    change mk _ = mk _ at h
    rw [mk_eq_mk_iff] at h
    exact ‚ü®PtSimplex.MulStruct.unique' (mulStruct g‚ÇÅ g‚ÇÇ i) h.some‚ü©
  ¬∑ rintro ‚ü®h‚ü©
    exact mul_eq_of_mulStruct h

lemma mul_assoc (i : Fin (n + 1)) (g‚ÇÅ g‚ÇÇ g‚ÇÉ : œÄ (n + 1) X x) :
    mul i (mul i g‚ÇÅ g‚ÇÇ) g‚ÇÉ = mul i g‚ÇÅ (mul i g‚ÇÇ g‚ÇÉ) := by
  obtain ‚ü®p‚ÇÅ, rfl‚ü© := g‚ÇÅ.mk_surjective
  obtain ‚ü®p‚ÇÇ, rfl‚ü© := g‚ÇÇ.mk_surjective
  obtain ‚ü®p‚ÇÉ, rfl‚ü© := g‚ÇÉ.mk_surjective
  exact mul_eq_of_mulStruct
    (PtSimplex.MulStruct.assoc (mulStruct p‚ÇÅ p‚ÇÇ i) (mulStruct p‚ÇÇ p‚ÇÉ i)
      (mulStruct p‚ÇÅ (mul' p‚ÇÇ p‚ÇÉ i) i))

@[simp]
lemma one_mul (i : Fin (n + 1)) (g : œÄ (n + 1) X x) :
    mul i 1 g = g := by
  obtain ‚ü®p, rfl‚ü© := g.mk_surjective
  exact mul_eq_of_mulStruct (PtSimplex.MulStruct.oneMul p i)

@[simp]
lemma mul_one (i : Fin (n + 1)) (g : œÄ (n + 1) X x) :
    mul i g 1 = g := by
  obtain ‚ü®p, rfl‚ü© := g.mk_surjective
  exact mul_eq_of_mulStruct (PtSimplex.MulStruct.mulOne p i)

lemma exists_left_inverse (i : Fin (n + 1)) (f : œÄ (n + 1) X x) :
    ‚àÉ g, mul i g f = 1 := by
  obtain ‚ü®p, rfl‚ü© := f.mk_surjective
  obtain ‚ü®q, ‚ü®h‚ü©‚ü© := PtSimplex.MulStruct.exists_left_inverse p i
  exact ‚ü®_, mul_eq_of_mulStruct h‚ü©

noncomputable def inv (i : Fin (n + 1)) (f : œÄ (n + 1) X x) : œÄ (n + 1) X x :=
  (exists_left_inverse i f).choose

@[simp]
lemma inv_mul (i : Fin (n + 1)) (f : œÄ (n + 1) X x) :
    mul i (inv i f) f = 1 := (exists_left_inverse i f).choose_spec

noncomputable instance : Mul (œÄ (n + 1) X x) where
  mul := mul 0

noncomputable instance : Group (œÄ (n + 1) X x) where
  mul_assoc := mul_assoc 0
  one_mul := one_mul 0
  mul_one := mul_one 0
  inv := inv 0
  inv_mul_cancel _ := inv_mul _ _

end œÄ

section

variable {X Y : SSet.{u}} [IsFibrant X] [IsFibrant Y] (f : X ‚ü∂ Y) (n : ‚Ñï)
  (x : X _‚¶ã0‚¶å) (y : Y _‚¶ã0‚¶å) (h : f.app _ x = y)

def mapœÄ_mul (i : Fin (n + 1)) (p q : œÄ (n + 1) X x) :
    mapœÄ f (n + 1) x y h (œÄ.mul i p q) =
    œÄ.mul i (mapœÄ f (n + 1) x y h p) (mapœÄ f (n + 1) x y h q) := by
  obtain ‚ü®p, rfl‚ü© := p.mk_surjective
  obtain ‚ü®q, rfl‚ü© := q.mk_surjective
  exact (œÄ.mul_eq_of_mulStruct ((œÄ.mulStruct p q i).pushforward f y h)).symm

end

end KanComplex

end SSet
