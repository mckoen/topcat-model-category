import TopCatModelCategory.SSet.Horn
import TopCatModelCategory.SSet.HomotopyBasic
import TopCatModelCategory.SSet.FundamentalGroupoid
import TopCatModelCategory.SSet.ProdSimplexOne

universe u

open HomotopicalAlgebra CategoryTheory Simplicial Limits MonoidalCategory
  ChosenFiniteProducts Opposite SSet.modelCategoryQuillen

namespace SSet

variable (X : SSet.{u})

abbrev PtSimplex (n : ‚Ñï) (x : X _‚¶ã0‚¶å) : Type u :=
  Subcomplex.RelativeMorphism
    (boundary n) (Subcomplex.ofSimplex x)
      (const ‚ü®x, Subcomplex.mem_ofSimplex_obj x‚ü©)

namespace PtSimplex

variable {X} {n : ‚Ñï} {x : X _‚¶ã0‚¶å}

@[simps]
def pushforward (z : X.PtSimplex n x) {Y : SSet.{u}} (f : X ‚ü∂ Y) (y : Y _‚¶ã0‚¶å)
    (hy : f.app _ x = y) : Y.PtSimplex n y where
  map := z.map ‚â´ f
  comm := by
    rw [Subcomplex.ofSimplex_Œπ, comp_const, z.comm_assoc, Subcomplex.ofSimplex_Œπ,
      const_comp, FunctorToTypes.comp, const_app, SimplexCategory.const_eq_id,
      op_id, FunctorToTypes.map_id_apply, hy]

@[simps]
def mk (f : Œî[n + 1] ‚ü∂ X)
    (hf : ‚àÄ i, stdSimplex.map (SimplexCategory.Œ¥ i) ‚â´ f = const x) :
    X.PtSimplex (n +1) x where
  map := f
  comm := by
    ext i : 1
    rw [Subcomplex.ofSimplex_Œπ, boundary.Œπ_Œπ_assoc, hf _, comp_const, comp_const]

def equiv‚ÇÄ : X.PtSimplex 0 x ‚âÉ X _‚¶ã0‚¶å where
  toFun f := yonedaEquiv f.map
  invFun y :=
    { map := yonedaEquiv.symm y
      comm := by
        ext _ ‚ü®x, hx‚ü©
        simp at hx }
  left_inv f := by simp
  right_inv y := by simp only [Equiv.apply_symm_apply]

lemma map_eq_const_equiv‚ÇÄ (s : X.PtSimplex 0 x) :
    s.map = const (equiv‚ÇÄ s) := by
  obtain ‚ü®y, rfl‚ü© := equiv‚ÇÄ.symm.surjective s
  simp [equiv‚ÇÄ]

section

@[reassoc]
lemma comp_map_eq_const
    (s : X.PtSimplex n x)
    {Y : SSet.{u}} (œÜ : Y ‚ü∂ Œî[n]) [Y.HasDimensionLT n] :
    œÜ ‚â´ s.map = const x := by
  refine (Subcomplex.lift œÜ ?_) ‚â´= s.comm
  apply le_antisymm (by simp)
  rw [‚Üê Subcomplex.image_le_iff, Subcomplex.image_top,
    stdSimplex.subcomplex_le_boundary_iff]
  intro h
  replace h : yonedaEquiv (ùüô _) ‚àà (Subcomplex.range œÜ).obj (op ‚¶ãn‚¶å) := by simp [h]
  obtain ‚ü®x, hx‚ü© := h
  have : ¬¨ (x ‚àà Y.degenerate n) := by
    intro hx'
    have := degenerate_map hx' œÜ
    simp [hx, mem_degenerate_iff_not_mem_nonDegenerate,
      stdSimplex.nonDegenerate_top_dim] at this
  simp [Y.degenerate_eq_top_of_hasDimensionLT n n (by rfl)] at this

@[reassoc (attr := simp)]
lemma Œ¥_map (f : X.PtSimplex (n + 1) x) (i : Fin (n + 2)) :
    stdSimplex.map (SimplexCategory.Œ¥ i) ‚â´ f.map = const x :=
  comp_map_eq_const _ _

end

structure RelStruct (f g : X.PtSimplex n x) (i : Fin (n + 1)) where
  map : Œî[n + 1] ‚ü∂ X
  Œ¥_castSucc_map : stdSimplex.map (SimplexCategory.Œ¥ i.castSucc) ‚â´ map = f.map := by aesop_cat
  Œ¥_succ_map : stdSimplex.map (SimplexCategory.Œ¥ i.succ) ‚â´ map = g.map := by aesop_cat
  Œ¥_map_of_lt (j : Fin (n + 2)) (hj : j < i.castSucc) :
    stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x := by aesop_cat
  Œ¥_map_of_gt (j : Fin (n + 2)) (hj : i.succ < j) :
    stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x := by aesop_cat

def RelStruct‚ÇÄ (f g : X.PtSimplex n x) := RelStruct f g 0

namespace RelStruct‚ÇÄ

def equiv‚ÇÄ {f g : X.PtSimplex 0 x} :
    RelStruct‚ÇÄ f g ‚âÉ
      KanComplex.FundamentalGroupoid.Edge (X := X) ‚ü®equiv‚ÇÄ g‚ü© ‚ü®equiv‚ÇÄ f‚ü© where
  toFun h := KanComplex.FundamentalGroupoid.Edge.mk h.map (by
    have := h.Œ¥_succ_map
    dsimp at this
    simp [this, map_eq_const_equiv‚ÇÄ]) (by
    have := h.Œ¥_castSucc_map
    dsimp at this
    simp [this, map_eq_const_equiv‚ÇÄ])
  invFun e :=
    { map := e.map
      Œ¥_succ_map := by simp [e.comm‚ÇÄ, map_eq_const_equiv‚ÇÄ]
      Œ¥_castSucc_map := by simp [e.comm‚ÇÅ, map_eq_const_equiv‚ÇÄ]
      Œ¥_map_of_lt := by aesop
      Œ¥_map_of_gt := by
        rintro j hj
        simp at hj
        omega }
  left_inv h := rfl
  right_inv e := rfl

end RelStruct‚ÇÄ

structure MulStruct (f g fg : X.PtSimplex n x) (i : Fin n) where
  map : Œî[n + 1] ‚ü∂ X
  Œ¥_succ_succ_map : stdSimplex.map (SimplexCategory.Œ¥ (i.succ.succ)) ‚â´ map = f.map :=
    by aesop_cat
  Œ¥_castSucc_castSucc_map : stdSimplex.map
    (SimplexCategory.Œ¥ (i.castSucc.castSucc)) ‚â´ map = g.map := by aesop_cat
  Œ¥_castSucc_succ_map : stdSimplex.map (SimplexCategory.Œ¥ (i.succ.castSucc)) ‚â´ map =
    fg.map := by aesop_cat
  Œ¥_map_of_lt (j : Fin (n + 2)) (hj : j < i.castSucc.castSucc) :
    stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x := by aesop_cat
  Œ¥_map_of_gt (j : Fin (n + 2)) (hj : i.succ.succ < j) :
    stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ map = const x := by aesop_cat

namespace RelStruct

attribute [reassoc (attr := simp)] Œ¥_castSucc_map Œ¥_succ_map
  Œ¥_map_of_lt Œ¥_map_of_gt

def refl (f : X.PtSimplex n x) (i : Fin (n + 1)) : RelStruct f f i where
  map := stdSimplex.map (SimplexCategory.œÉ i) ‚â´ f.map
  Œ¥_castSucc_map := by
    simp [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_self]
  Œ¥_succ_map := by
    simp [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_succ]
  Œ¥_map_of_lt j hj := by
    obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
    ¬∑ simp at hj
    . obtain ‚ü®j, rfl‚ü© | rfl := j.eq_castSucc_or_eq_last
      ¬∑ obtain _ | n := n
        ¬∑ fin_cases i
        ¬∑ rw [‚Üê Functor.map_comp_assoc,
            SimplexCategory.Œ¥_comp_œÉ_of_le
            (by simpa only[‚Üê Fin.succ_castSucc,
              Fin.castSucc_lt_succ_iff] using hj),
            Functor.map_comp_assoc, Œ¥_map, comp_const]
      ¬∑ have := Fin.ne_last_of_lt hj
        simp at this
  Œ¥_map_of_gt j hj := by
    obtain ‚ü®i, rfl‚ü© | rfl := i.eq_castSucc_or_eq_last
    ¬∑ obtain _ | n := n
      ¬∑ fin_cases i
      ¬∑ obtain rfl | ‚ü®j, rfl‚ü© := j.eq_zero_or_eq_succ
        ¬∑ simp at hj
        ¬∑ rw [‚Üê Functor.map_comp_assoc,
            SimplexCategory.Œ¥_comp_œÉ_of_gt (by simpa using hj),
            Functor.map_comp_assoc, Œ¥_map, comp_const]
    ¬∑ simp only [Fin.succ_last, Nat.succ_eq_add_one] at hj
      have := Fin.ne_last_of_lt hj
      simp at this

def ofEq {f g : X.PtSimplex n x} (h : f = g) (i : Fin (n + 1)) : RelStruct f g i := by
  subst h
  exact refl f i

end RelStruct

def RelStruct‚ÇÄ.ofEq {f g : X.PtSimplex n x} (h : f = g) : RelStruct‚ÇÄ f g :=
  RelStruct.ofEq h 0

namespace MulStruct

attribute [reassoc (attr := simp)] Œ¥_succ_succ_map Œ¥_castSucc_castSucc_map
  Œ¥_castSucc_succ_map Œ¥_map_of_lt Œ¥_map_of_gt

@[reassoc (attr := simp)]
lemma Œ¥_succ_castSucc_map {f g fg : X.PtSimplex n x} {i : Fin n}
    (h : MulStruct f g fg i) :
    stdSimplex.map (SimplexCategory.Œ¥ i.castSucc.succ) ‚â´ h.map = fg.map := by
  simp [Fin.succ_castSucc]

@[simps]
def pushforward {f g fg : X.PtSimplex n x} {i : Fin n}
    (h : MulStruct f g fg i) {Y : SSet.{u}} (œÜ : X ‚ü∂ Y) (y : Y _‚¶ã0‚¶å)
    (hxy : œÜ.app (op ‚¶ã0‚¶å) x = y) :
    MulStruct (f.pushforward œÜ y hxy) (g.pushforward œÜ y hxy) (fg.pushforward œÜ y hxy) i where
  map := h.map ‚â´ œÜ
  Œ¥_map_of_lt j hj := by simp [h.Œ¥_map_of_lt_assoc j hj, hxy]
  Œ¥_map_of_gt j hj := by simp [h.Œ¥_map_of_gt_assoc j hj, hxy]

end MulStruct

def relStructCastSuccEquivMulStruct {f g : X.PtSimplex n x} {i : Fin n} :
    RelStruct f g i.castSucc ‚âÉ MulStruct .const f g i where
  toFun h :=
    { map := h.map
      Œ¥_succ_succ_map := h.Œ¥_map_of_gt i.succ.succ (by simp)
      Œ¥_map_of_gt j hj := h.Œ¥_map_of_gt j (lt_trans (by simp) hj)
      Œ¥_castSucc_succ_map := by simp only [‚Üê Fin.succ_castSucc, RelStruct.Œ¥_succ_map] }
  invFun h :=
    { map := h.map
      Œ¥_map_of_gt j hj := by
        rw [Fin.succ_castSucc, Fin.castSucc_lt_iff_succ_le] at hj
        obtain rfl | hj := hj.eq_or_lt
        ¬∑ exact h.Œ¥_succ_succ_map
        ¬∑ exact h.Œ¥_map_of_gt j hj }
  left_inv _ := rfl
  right_inv _ := rfl

def relStructSuccEquivMulStruct {f g : X.PtSimplex n x} {i : Fin n} :
    RelStruct f g i.succ ‚âÉ MulStruct g .const f i where
  toFun h :=
    { map := h.map
      Œ¥_castSucc_succ_map := h.Œ¥_castSucc_map
      Œ¥_map_of_lt j hj := h.Œ¥_map_of_lt j (lt_trans hj (by simp)) }
  invFun h :=
    { map := h.map
      Œ¥_castSucc_map := h.Œ¥_castSucc_succ_map
      Œ¥_map_of_lt j hj := by
        rw [‚Üê Fin.succ_castSucc] at hj
        obtain rfl | hj := (Fin.le_castSucc_iff.2 hj).eq_or_lt
        ¬∑ exact h.Œ¥_castSucc_castSucc_map
        ¬∑ exact h.Œ¥_map_of_lt j hj }
  left_inv _ := rfl
  right_inv _ := rfl

namespace MulStruct

def oneMul (f : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    MulStruct .const f f i :=
  relStructCastSuccEquivMulStruct (RelStruct.refl f i.castSucc)

def mulOne (f : X.PtSimplex (n + 1) x) (i : Fin (n + 1)) :
    MulStruct f .const f i :=
  relStructSuccEquivMulStruct (RelStruct.refl f i.succ)

variable [IsFibrant X]

noncomputable def assoc
    {f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ : X.PtSimplex n x} {i : Fin n}
    (h‚ÇÄ‚ÇÇ : MulStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ i) (h‚ÇÅ‚ÇÉ : MulStruct f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ i)
    (h : MulStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ i) :
    MulStruct f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÉ i := by
  apply Nonempty.some
  let Œ± (j : ({i.succ.castSucc.castSucc}·∂ú : Set (Fin (n + 3)))) : Œî[n + 1] ‚ü∂ X :=
    if j.1 = i.castSucc.castSucc.castSucc then h‚ÇÅ‚ÇÉ.map else
      if j.1 = i.castSucc.succ.succ then h.map else
        if j.1 = i.succ.succ.succ then h‚ÇÄ‚ÇÇ.map else
          const x
  have hŒ±‚ÇÄ (j : ({i.succ.castSucc.castSucc}·∂ú : Set (Fin (n + 3))))
      (hŒ± : j.1 < i.castSucc.castSucc.castSucc) : Œ± j = const x := by
    dsimp [Œ±]
    rw [if_neg, if_neg, if_neg]
    all_goals
      simp [Fin.lt_iff_val_lt_val, Fin.ext_iff] at hŒ± ‚ä¢
      omega
  have hŒ±‚ÇÅ : Œ± ‚ü®i.castSucc.castSucc.castSucc, by simp [Fin.ext_iff]‚ü© = h‚ÇÅ‚ÇÉ.map := if_pos rfl
  have hŒ±‚ÇÇ : Œ± ‚ü®i.castSucc.succ.succ, by simp [Fin.ext_iff]‚ü© = h.map := by
    dsimp [Œ±]
    rw [if_neg, if_pos rfl]
    simp [Fin.ext_iff]
    omega
  have hŒ±‚ÇÉ : Œ± ‚ü®i.succ.succ.succ, by simp [Fin.ext_iff]; omega‚ü© = h‚ÇÄ‚ÇÇ.map := by
    dsimp [Œ±]
    rw [if_neg, if_neg, if_pos rfl] <;> simp [Fin.ext_iff]; omega
  have hŒ±‚ÇÑ (j : ({i.succ.castSucc.castSucc}·∂ú : Set (Fin (n + 3))))
      (hŒ± : i.succ.succ.succ < j) : Œ± j = const x := by
    dsimp [Œ±]
    rw [if_neg, if_neg, if_neg]
    simp [Fin.ext_iff]
    all_goals
      simp [Fin.lt_iff_val_lt_val, Fin.ext_iff] at hŒ± ‚ä¢
      omega
  obtain ‚ü®Œ≤, hŒ≤‚ü© := horn.exists_desc Œ± (by
    rintro ‚ü®j, hj‚ü© ‚ü®k, hk‚ü© hjk
    dsimp at hjk
    simp only [Set.mem_compl_iff, Set.mem_singleton_iff] at hj hk
    by_cases hk‚ÇÅ : k < i.castSucc.castSucc.castSucc
    ¬∑ rw [hŒ±‚ÇÄ _ (hjk.trans hk‚ÇÅ), hŒ±‚ÇÄ _ hk‚ÇÅ, comp_const, comp_const]
    ¬∑ simp only [not_lt] at hk‚ÇÅ
      obtain hk‚ÇÅ | rfl := hk‚ÇÅ.lt_or_eq; swap
      ¬∑ rw [hŒ±‚ÇÅ, hŒ±‚ÇÄ _ hjk, h‚ÇÅ‚ÇÉ.Œ¥_map_of_lt _ hjk, comp_const]
      ¬∑ rw [Fin.castSucc_lt_iff_succ_le] at hk‚ÇÅ
        obtain hk‚ÇÅ | rfl := hk‚ÇÅ.lt_or_eq; swap
        ¬∑ exact (hk rfl).elim
        ¬∑ rw [Fin.succ_castSucc, Fin.castSucc_lt_iff_succ_le] at hk‚ÇÅ
          obtain hk‚ÇÅ | rfl := hk‚ÇÅ.lt_or_eq; swap
          ¬∑ rw [hŒ±‚ÇÇ]
            by_cases hj‚ÇÅ : j < i.castSucc.castSucc.castSucc
            ¬∑ rw [hŒ±‚ÇÄ _ hj‚ÇÅ, comp_const, h.Œ¥_map_of_lt _ hj‚ÇÅ]
            ¬∑ simp only [not_lt] at hj‚ÇÅ
              obtain rfl | hj‚ÇÅ := hj‚ÇÅ.eq_or_lt
              ¬∑ simp [hŒ±‚ÇÅ]
              ¬∑ rw [‚Üê Fin.succ_le_castSucc_iff,
                  ‚Üê Fin.succ_castSucc, Fin.succ_le_succ_iff] at hjk
                obtain hjk | rfl := hjk.lt_or_eq
                ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Fin.le_castSucc_iff] at hjk
                  omega
                ¬∑ exact (hj rfl).elim
          ¬∑ rw [Fin.succ_castSucc, Fin.succ_castSucc,
              Fin.castSucc_lt_iff_succ_le] at hk‚ÇÅ
            obtain hk‚ÇÅ | rfl := hk‚ÇÅ.lt_or_eq; swap
            ¬∑ rw [hŒ±‚ÇÉ, Fin.pred_succ]
              rw [‚Üê Fin.le_castSucc_iff] at hjk
              obtain hjk | rfl := hjk.lt_or_eq; swap
              ¬∑ rw [Fin.castPred_castSucc, Œ¥_succ_succ_map]
                simp only [‚Üê Fin.succ_castSucc, hŒ±‚ÇÇ,
                  Œ¥_succ_succ_map]
              ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Fin.le_castSucc_iff] at hjk
                obtain hjk | rfl := hjk.lt_or_eq; swap
                ¬∑ exact (hj rfl).elim
                ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Fin.succ_castSucc, ‚Üê Fin.le_castSucc_iff] at hjk
                  obtain hjk | rfl := hjk.lt_or_eq; swap
                  ¬∑ simp [hŒ±‚ÇÅ]
                  ¬∑ rw [hŒ±‚ÇÄ _ hjk, comp_const, h‚ÇÄ‚ÇÇ.Œ¥_map_of_lt _ hjk]
            ¬∑ rw [hŒ±‚ÇÑ ‚ü®k, _‚ü© hk‚ÇÅ, comp_const]
              by_cases hj‚ÇÅ : i.succ.succ.succ < j
              ¬∑ rw [hŒ±‚ÇÑ _ hj‚ÇÅ, comp_const]
              ¬∑ simp only [not_lt] at hj‚ÇÅ
                obtain hj‚ÇÅ | rfl := hj‚ÇÅ.lt_or_eq; swap
                ¬∑ rw [hŒ±‚ÇÉ]
                  apply h‚ÇÄ‚ÇÇ.Œ¥_map_of_gt
                  rw [‚Üê Fin.succ_lt_succ_iff, Fin.succ_pred]
                  exact hjk
                ¬∑ rw [‚Üê Fin.le_castSucc_iff] at hj‚ÇÅ
                  obtain hj‚ÇÅ | rfl := hj‚ÇÅ.lt_or_eq; swap
                  ¬∑ simp only [‚Üê Fin.succ_castSucc, hŒ±‚ÇÇ]
                    apply h.Œ¥_map_of_gt
                    rw [‚Üê Fin.succ_lt_succ_iff, Fin.succ_pred]
                    exact hk‚ÇÅ
                  ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Fin.le_castSucc_iff] at hj‚ÇÅ
                    obtain hj‚ÇÅ | rfl := hj‚ÇÅ.lt_or_eq; swap
                    ¬∑ exact (hj rfl).elim
                    ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Fin.succ_castSucc,
                        ‚Üê Fin.le_castSucc_iff] at hj‚ÇÅ
                      obtain hj‚ÇÅ | rfl := hj‚ÇÅ.lt_or_eq; swap
                      ¬∑ rw [hŒ±‚ÇÅ]
                        apply h‚ÇÅ‚ÇÉ.Œ¥_map_of_gt
                        rw [‚Üê Fin.succ_lt_succ_iff, Fin.succ_pred]
                        exact hk‚ÇÅ
                      ¬∑ rw [hŒ±‚ÇÄ _ hj‚ÇÅ, comp_const])
  obtain ‚ü®Œ≥, hŒ≥‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ≤
    (anodyneExtensions.horn_Œπ_mem _ _)
  replace hŒ≥ (j : Fin (n + 3)) (hj : j ‚â† i.succ.castSucc.castSucc) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ Œ≥ = Œ± ‚ü®j, hj‚ü© := by
    rw [‚Üê hŒ≤ ‚ü®j, hj‚ü©, ‚Üê hŒ≥, horn.Œπ_Œπ_assoc]
  let Œº := stdSimplex.map (SimplexCategory.Œ¥ i.succ.castSucc.castSucc) ‚â´ Œ≥
  have hŒº (j : Fin (n + 2)) (hj : j ‚â§ i.castSucc.castSucc) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ Œº =
        stdSimplex.map (SimplexCategory.Œ¥ i.castSucc.castSucc) ‚â´
          Œ± ‚ü®j.castSucc, by
            simp only [Set.mem_compl_iff, Set.mem_singleton_iff, Fin.castSucc_inj]
            rintro rfl
            simp at hj‚ü© := by
    dsimp [Œº]
    conv_lhs =>
      rw [‚Üê Functor.map_comp_assoc, ‚Üê Fin.succ_castSucc,
        ‚Üê Fin.succ_castSucc, SimplexCategory.Œ¥_comp_Œ¥ hj,
        Functor.map_comp_assoc, hŒ≥ _ (by
          simp only [ne_eq, Fin.castSucc_inj, Œº]
          rintro rfl
          simp at hj)]
  have hŒº' (j : Fin (n + 2)) (hj : i.succ.castSucc ‚â§ j) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ Œº =
        stdSimplex.map (SimplexCategory.Œ¥ i.succ.castSucc) ‚â´
          Œ± ‚ü®j.succ, by
            simp [‚Üê Fin.succ_castSucc]
            rintro rfl
            simp at hj‚ü© := by
    dsimp [Œº]
    conv_lhs =>
      rw [‚Üê Functor.map_comp_assoc,
        ‚Üê SimplexCategory.Œ¥_comp_Œ¥ hj, Functor.map_comp_assoc]
    rw [hŒ≥]
  refine ‚ü®{
      map := Œº
      Œ¥_succ_succ_map := by
        rw [hŒº' _ i.succ.castSucc_le_succ, hŒ±‚ÇÉ]
        exact h‚ÇÄ‚ÇÇ.Œ¥_castSucc_succ_map
      Œ¥_castSucc_castSucc_map := by
        rw [hŒº _ (by rfl), hŒ±‚ÇÅ]
        exact h‚ÇÅ‚ÇÉ.Œ¥_castSucc_castSucc_map
      Œ¥_castSucc_succ_map := by
        rw [hŒº' _ (by rfl)]
        simp only [‚Üê Fin.succ_castSucc, hŒ±‚ÇÇ]
        exact h.Œ¥_castSucc_succ_map
      Œ¥_map_of_lt j hj := by
        rw [hŒº _ (by omega), hŒ±‚ÇÄ _ (by simpa using hj), comp_const]
      Œ¥_map_of_gt j hj := by
        rw [hŒº' _ (le_trans
            (by simpa [‚Üê Fin.succ_castSucc] using i.castSucc_le_succ) hj.le),
          hŒ±‚ÇÑ _ (by simpa), comp_const]
  }‚ü©

noncomputable def assoc'
    {f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÇ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ : X.PtSimplex n x} {i : Fin n}
    (h‚ÇÄ‚ÇÇ : MulStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ i) (h‚ÇÅ‚ÇÉ : MulStruct f‚ÇÅ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÅ‚ÇÉ i)
    (h : MulStruct f‚ÇÄ‚ÇÇ f‚ÇÇ‚ÇÉ f‚ÇÄ‚ÇÉ i) :
    MulStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÉ f‚ÇÄ‚ÇÉ i :=
  -- this should be very similar to `assoc` above
  sorry

section

variable {p q r : X.PtSimplex (n + 1) x} {i : Fin (n + 1)}

noncomputable def mulOneEqSymm (h : MulStruct p .const q i) :
    MulStruct q .const p i :=
  assoc h (mulOne _ i) (mulOne p i)

noncomputable def oneMulEqSymm (h : MulStruct .const p q i) :
    MulStruct .const q p i :=
  assoc' (oneMul _ i) h (oneMul p i)

noncomputable def oneMulEqOfMulOneEq (h : MulStruct p .const q i) :
    MulStruct .const p q i :=
  (assoc' (oneMul p i) h (mulOne p i)).oneMulEqSymm

noncomputable def mulOneEqOfOneMulEq (h : MulStruct .const p q i) :
    MulStruct p .const q i :=
  (assoc h (mulOne p i) (oneMul p i)).mulOneEqSymm

noncomputable def mulOneEqTrans (h : MulStruct p .const q i)
    (h' : MulStruct q .const r i) :
    MulStruct p .const r i :=
  assoc (oneMul p i) h h'.oneMulEqOfMulOneEq

noncomputable def oneMulEqTrans (h : MulStruct .const p q i)
    (h' : MulStruct .const q r i) :
    MulStruct .const p r i :=
  assoc' h (mulOne p i) h'.mulOneEqOfOneMulEq

end

end MulStruct

namespace RelStruct

variable [IsFibrant X]

open MulStruct

noncomputable def symm {p q : X.PtSimplex n x} {i : Fin (n + 1)} (h : RelStruct p q i) :
    RelStruct q p i := by
  obtain _ | n  := n
  ¬∑ obtain rfl : i = 0 := by fin_cases i; rfl
    exact RelStruct‚ÇÄ.equiv‚ÇÄ.symm ((RelStruct‚ÇÄ.equiv‚ÇÄ h).inv)
  ¬∑ apply Nonempty.some
    obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
    ¬∑ exact ‚ü®relStructCastSuccEquivMulStruct.symm
        (oneMulEqSymm ((relStructCastSuccEquivMulStruct (i := 0) h)))‚ü©
    ¬∑ exact ‚ü®relStructSuccEquivMulStruct.symm
        (mulOneEqSymm (relStructSuccEquivMulStruct h))‚ü©

noncomputable def trans {p q r : X.PtSimplex n x} {i : Fin (n + 1)} (h : RelStruct p q i)
    (h' : RelStruct q r i) : RelStruct p r i := by
  obtain _ | n := n
  ¬∑ obtain rfl : i = 0 := by fin_cases i; rfl
    exact RelStruct‚ÇÄ.equiv‚ÇÄ.symm ((RelStruct‚ÇÄ.equiv‚ÇÄ h').comp (RelStruct‚ÇÄ.equiv‚ÇÄ h))
  ¬∑ apply Nonempty.some
    obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
    ¬∑ exact ‚ü®relStructCastSuccEquivMulStruct.symm
        (oneMulEqTrans
        ((relStructCastSuccEquivMulStruct (i := 0) h))
        ((relStructCastSuccEquivMulStruct (i := 0) h')))‚ü©
    ¬∑ exact ‚ü®relStructSuccEquivMulStruct.symm
        (mulOneEqTrans (relStructSuccEquivMulStruct h')
        (relStructSuccEquivMulStruct h))‚ü©

noncomputable def succ {p q : X.PtSimplex n x} {i : Fin n} (h : RelStruct p q i.castSucc) :
    RelStruct p q i.succ := by
  obtain _ | n := n
  ¬∑ exfalso
    fin_cases i
  ¬∑ exact relStructSuccEquivMulStruct.symm
      (mulOneEqOfOneMulEq (relStructCastSuccEquivMulStruct h.symm))

noncomputable def ofSucc {p q : X.PtSimplex n x} {i : Fin n} (h : RelStruct p q i.succ) :
    RelStruct p q i.castSucc := by
  obtain _ | n := n
  ¬∑ exfalso
    fin_cases i
  ¬∑ exact relStructCastSuccEquivMulStruct.symm
      ((oneMulEqOfMulOneEq (relStructSuccEquivMulStruct h.symm)))

noncomputable def relStruct‚ÇÄ {p q : X.PtSimplex n x} {i : Fin (n + 1)} (h : RelStruct p q i) :
    RelStruct‚ÇÄ p q := by
  induction i using Fin.induction  with
  | zero => exact h
  | succ i hi => exact hi h.ofSucc

end RelStruct

namespace RelStruct‚ÇÄ

variable [IsFibrant X]

noncomputable def relStruct {p q : X.PtSimplex n x}
    (h : RelStruct‚ÇÄ p q) (i : Fin (n + 1)) : RelStruct p q i := by
  obtain _ | n := n
  ¬∑ obtain rfl : i = 0 := by aesop
    exact h
  ¬∑ induction i using Fin.induction  with
    | zero => exact h
    | succ i hi => exact hi.succ

def refl (p : X.PtSimplex n x) : RelStruct‚ÇÄ p p := RelStruct.refl _ _

noncomputable def symm {p q : X.PtSimplex n x} (h : RelStruct‚ÇÄ p q) : RelStruct‚ÇÄ q p :=
  RelStruct.symm h

noncomputable def trans {p q r : X.PtSimplex n x} (h : RelStruct‚ÇÄ p q) (h' : RelStruct‚ÇÄ q r) :
    RelStruct‚ÇÄ p r :=
  RelStruct.trans h h'

end RelStruct‚ÇÄ

namespace MulStruct

variable [IsFibrant X] {i : Fin (n + 1)}

noncomputable def unique {p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ' : X.PtSimplex (n + 1) x}
    (h : MulStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ i)
    (h' : MulStruct p‚ÇÄ‚ÇÅ' p‚ÇÅ‚ÇÇ' p‚ÇÄ‚ÇÇ' i)
    (h‚ÇÄ‚ÇÅ : RelStruct‚ÇÄ p‚ÇÄ‚ÇÅ p‚ÇÄ‚ÇÅ') (h‚ÇÅ‚ÇÇ : RelStruct‚ÇÄ p‚ÇÅ‚ÇÇ p‚ÇÅ‚ÇÇ') :
    RelStruct‚ÇÄ p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' :=
  RelStruct.relStruct‚ÇÄ
    (relStructSuccEquivMulStruct.symm
      (assoc h' (relStructSuccEquivMulStruct (h‚ÇÅ‚ÇÇ.relStruct i.succ))
        (assoc (relStructSuccEquivMulStruct (h‚ÇÄ‚ÇÅ.symm.relStruct i.succ)) (oneMul p‚ÇÅ‚ÇÇ i) h)))

noncomputable def unique' {p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ' : X.PtSimplex (n + 1) x}
    (h : MulStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ i) (h‚ÇÄ‚ÇÇ : RelStruct‚ÇÄ p‚ÇÄ‚ÇÇ p‚ÇÄ‚ÇÇ') :
    MulStruct p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÇ p‚ÇÄ‚ÇÇ' i :=
  MulStruct.assoc' h (mulOne p‚ÇÅ‚ÇÇ i)
    (relStructSuccEquivMulStruct (h‚ÇÄ‚ÇÇ.symm.relStruct i.succ))

variable (p q) in
lemma nonempty (i : Fin (n + 1)) :
    ‚àÉ (r : X.PtSimplex (n + 1) x), Nonempty (MulStruct p q r i) := by
  let Œ± (j : ({i.succ.castSucc}·∂ú : Set (Fin (n + 3)))) : X.PtSimplex (n + 1) x :=
    if j = i.castSucc.castSucc then q else
      if j = i.succ.succ then p else
        .const
  have hŒ±‚ÇÄ (j) (hj : j.1 < i.castSucc.castSucc) : Œ± j = .const := by
    dsimp [Œ±]
    rw [if_neg, if_neg]
    all_goals
      simp [Fin.ext_iff, Fin.lt_iff_val_lt_val] at hj ‚ä¢
      omega
  have hŒ±‚ÇÅ : Œ± ‚ü®i.castSucc.castSucc, by simp [Fin.ext_iff]‚ü© = q := if_pos rfl
  have hŒ±‚ÇÇ : Œ± ‚ü®i.succ.succ, by simp [Fin.ext_iff]‚ü© = p := by
    dsimp [Œ±]
    rw [if_neg, if_pos rfl]
    simp [Fin.ext_iff]
    omega
  have hŒ±‚ÇÉ (j) (hj : i.succ.succ < j.1) : Œ± j = .const := by
    dsimp [Œ±]
    rw [if_neg, if_neg]
    all_goals
      simp [Fin.ext_iff, Fin.lt_iff_val_lt_val] at hj ‚ä¢
      omega
  obtain ‚ü®Œ≤, hŒ≤‚ü© := horn.exists_desc (fun j ‚Ü¶ (Œ± j).map) (by simp)
  obtain ‚ü®Œ≥, hŒ≥‚ü© := anodyneExtensions.exists_lift_of_isFibrant Œ≤
    (anodyneExtensions.horn_Œπ_mem _ _)
  replace hŒ≥ (j : Fin (n + 3)) (hj : j ‚â† i.succ.castSucc) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´ Œ≥ = (Œ± ‚ü®j, hj‚ü©).map := by
    rw [‚Üê hŒ≤, ‚Üê hŒ≥, horn.Œπ_Œπ_assoc]
  refine ‚ü®.mk (stdSimplex.map (SimplexCategory.Œ¥ i.succ.castSucc) ‚â´ Œ≥) ?_, ‚ü®?_‚ü©‚ü©
  ¬∑ intro j
    rw [‚Üê Functor.map_comp_assoc, ‚Üê Fin.succ_castSucc]
    by_cases hj : j ‚â§ i.castSucc
    ¬∑ rw [SimplexCategory.Œ¥_comp_Œ¥ hj, Functor.map_comp_assoc,
        hŒ≥, Œ¥_map]
      simp [Fin.ext_iff, Fin.le_iff_val_le_val] at hj ‚ä¢
      omega
    ¬∑ rw [Fin.succ_castSucc, ‚Üê SimplexCategory.Œ¥_comp_Œ¥ (by simpa using hj),
        Functor.map_comp_assoc, hŒ≥, Œ¥_map]
      simp [Fin.ext_iff, Fin.le_iff_val_le_val] at hj ‚ä¢
      omega
  ¬∑ exact {
      map := Œ≥
      Œ¥_succ_succ_map := by rw [hŒ≥, hŒ±‚ÇÇ]
      Œ¥_castSucc_castSucc_map := by rw [hŒ≥, hŒ±‚ÇÅ]
      Œ¥_castSucc_succ_map := rfl
      Œ¥_map_of_lt j hj := by
        rw [hŒ≥, hŒ±‚ÇÄ _ hj, Subcomplex.RelativeMorphism.const_map]
        rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj
      Œ¥_map_of_gt j hj := by
        rw [hŒ≥, hŒ±‚ÇÉ _ hj, Subcomplex.RelativeMorphism.const_map]
        rintro rfl
        simp [Fin.lt_iff_val_lt_val] at hj
    }

-- this should be similar to `nonempty` above
variable (p) in
lemma exists_left_inverse (i : Fin (n + 1)) :
    ‚àÉ (q : X.PtSimplex (n + 1) x), Nonempty (MulStruct q p .const i) := by
  sorry

end MulStruct

variable [IsFibrant X] (p q : X.PtSimplex n x)

abbrev Homotopy := Subcomplex.RelativeMorphism.Homotopy p q

variable {p q}

namespace Homotopy

noncomputable def relStruct‚ÇÄ (h : p.Homotopy q) : RelStruct‚ÇÄ p q := by
  obtain _ | n := n
  ¬∑ refine (RelStruct‚ÇÄ.equiv‚ÇÄ.symm
      (KanComplex.FundamentalGroupoid.Edge.mk
        ((stdSimplex.leftUnitor _).inv ‚â´ h.h) ?_ ?_)).symm
    ¬∑ dsimp
      rw [‚Üê stdSimplex.Œπ‚ÇÄ_stdSimplex_zero_assoc, h.h‚ÇÄ, map_eq_const_equiv‚ÇÄ]
    ¬∑ dsimp
      rw [‚Üê stdSimplex.Œπ‚ÇÅ_stdSimplex_zero_assoc, h.h‚ÇÅ, map_eq_const_equiv‚ÇÄ]
  have hrel (k : Fin (n + 2)) : stdSimplex.map (SimplexCategory.Œ¥ k) ‚ñ∑ Œî[1] ‚â´ h.h =
    const x := by
      have := boundary.Œπ k ‚ñ∑ _ ‚â´= h.rel
      rw [‚Üê comp_whiskerRight_assoc, boundary.Œπ_Œπ, Subcomplex.ofSimplex_Œπ,
        comp_const, comp_const, comp_const] at this
      exact this
  have hrel‚ÇÅ (i : Fin (n + 2)) (j : Fin (n + 3)) (hij : i.succ < j) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´
        prodStdSimplex‚ÇÅ.Œπ i ‚â´ h.h = const x := by
    rw [prodStdSimplex‚ÇÅ.Œ¥_Œπ_of_succ_lt_assoc _ _ hij, hrel, comp_const]
  have hrel‚ÇÇ (i : Fin (n + 2)) (j : Fin (n + 3)) (hij : j < i.castSucc) :
      stdSimplex.map (SimplexCategory.Œ¥ j) ‚â´
        prodStdSimplex‚ÇÅ.Œπ i ‚â´ h.h = const x := by
    rw [prodStdSimplex‚ÇÅ.Œ¥_Œπ_of_lt_assoc _ _ hij, hrel, comp_const]
  let src (i : Fin (n + 2)) : X.PtSimplex (n + 1) x :=
    { map := stdSimplex.map (SimplexCategory.Œ¥ i.castSucc) ‚â´
        prodStdSimplex‚ÇÅ.Œπ.{u} i ‚â´ h.h
      comm := by
        ext j : 1
        rw [boundary.Œπ_Œπ_assoc, Subcomplex.ofSimplex_Œπ,
          comp_const, comp_const]
        by_cases hij : i < j
        ¬∑ rw [‚Üê Functor.map_comp_assoc, ‚Üê SimplexCategory.Œ¥_comp_Œ¥ hij.le,
            Functor.map_comp_assoc, hrel‚ÇÅ _ _ (by simpa using hij), comp_const]
        ¬∑ simp only [not_lt] at hij
          obtain rfl | ‚ü®i, rfl‚ü© := i.eq_zero_or_eq_succ
          ¬∑ dsimp
            rw [prodStdSimplex‚ÇÅ.Œ¥_Œπ_zero_assoc, h.h‚ÇÅ, Œ¥_map]
          ¬∑ obtain hij | rfl := hij.lt_or_eq
            ¬∑ rw [‚Üê Fin.succ_castSucc, ‚Üê Functor.map_comp_assoc,
                SimplexCategory.Œ¥_comp_Œ¥ (Fin.le_castSucc_iff.2 hij),
                Functor.map_comp_assoc, hrel‚ÇÇ _ _ hij, comp_const]
            ¬∑ rw [prodStdSimplex‚ÇÅ.Œ¥_succ_castSucc_Œπ_succ_assoc,
                ‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_Œ¥_self,
                Functor.map_comp_assoc, hrel‚ÇÅ _ _ (by simp), comp_const] }
  let tgt (i : Fin (n + 2)) : X.PtSimplex (n + 1) x :=
    { map := stdSimplex.map (SimplexCategory.Œ¥ i.succ) ‚â´
      prodStdSimplex‚ÇÅ.Œπ.{u} i ‚â´ h.h
      comm := by
        ext j : 1
        rw [boundary.Œπ_Œπ_assoc, Subcomplex.ofSimplex_Œπ,
          comp_const, comp_const]
        by_cases hij : j ‚â§ i
        ¬∑ rw [‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_Œ¥ hij,
            Functor.map_comp_assoc]
          obtain hij | rfl := hij.lt_or_eq
          ¬∑ rw [hrel‚ÇÇ _ _ (by simpa), comp_const]
          ¬∑ obtain rfl | ‚ü®j, rfl‚ü© := j.eq_zero_or_eq_succ
            ¬∑ dsimp
              rw [prodStdSimplex‚ÇÅ.Œ¥_Œπ_zero_assoc, h.h‚ÇÅ, Œ¥_map]
            ¬∑ rw [prodStdSimplex‚ÇÅ.Œ¥_succ_castSucc_Œπ_succ_assoc,
                ‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_Œ¥_self,
                Functor.map_comp_assoc, hrel‚ÇÅ _ _ (by simp), comp_const]
        ¬∑ simp only [not_le] at hij
          obtain ‚ü®i, rfl‚ü© := i.eq_castSucc_of_ne_last (Fin.ne_last_of_lt hij)
          rw [‚Üê Functor.map_comp_assoc, Fin.succ_castSucc,
            ‚Üê SimplexCategory.Œ¥_comp_Œ¥ (by simpa),
            Functor.map_comp_assoc, hrel‚ÇÅ _ _ (by simpa), comp_const] }
  have œÅ (i : Fin (n + 2)) : RelStruct (src i) (tgt i) i :=
    { map := prodStdSimplex‚ÇÅ.Œπ i ‚â´ h.h
      Œ¥_castSucc_map := rfl
      Œ¥_succ_map := rfl
      Œ¥_map_of_gt j hij := hrel‚ÇÅ _ _ hij
      Œ¥_map_of_lt j hij := hrel‚ÇÇ _ _ hij}
  have h‚ÇÄ : src 0 = q := by
    ext : 1
    simp [src, prodStdSimplex‚ÇÅ.Œ¥_Œπ_zero_assoc]
  have h‚ÇÅ (i : Fin (n + 1)) : src i.succ = tgt i.castSucc := by
    ext : 1
    dsimp only [src, tgt]
    rw [prodStdSimplex‚ÇÅ.Œ¥_succ_castSucc_Œπ_succ_assoc, Fin.succ_castSucc]
  have h‚ÇÇ : tgt (Fin.last _) = p := by
    ext : 1
    simp [tgt, prodStdSimplex‚ÇÅ.Œ¥_Œπ_last_assoc]
  have (i : Fin (n + 2)) : RelStruct‚ÇÄ q (tgt i) := by
    induction i using Fin.induction with
    | zero => simpa only [‚Üê h‚ÇÄ] using œÅ 0
    | succ i hi => exact hi.trans (by simpa only [‚Üê h‚ÇÅ] using (œÅ i.succ).relStruct‚ÇÄ)
  simpa only [‚Üê h‚ÇÇ] using (this (Fin.last _)).symm

end Homotopy

noncomputable def RelStruct‚ÇÄ.homotopy (h : RelStruct‚ÇÄ p q) : p.Homotopy q := by
  apply Nonempty.some
  obtain _ | n := n
  ¬∑ refine ‚ü®{
      h := snd _ _ ‚â´ h.symm.map
      h‚ÇÄ := by
        rw [‚Üê h.symm.Œ¥_succ_map, Œπ‚ÇÄ_snd_assoc, stdSimplex.obj‚ÇÄEquiv_symm_apply,
          const_comp, Fin.succ_zero_eq_one]
        apply (yonedaEquiv).injective
        rw [yonedaEquiv‚ÇÄ, yonedaEquiv_map_comp]
        erw [‚Üê FunctorToTypes.naturality]
        apply congr_arg
        ext i : 1
        fin_cases i
        rfl
      h‚ÇÅ := by
        rw [‚Üê h.symm.Œ¥_castSucc_map, Œπ‚ÇÅ_snd_assoc, stdSimplex.obj‚ÇÄEquiv_symm_apply,
          const_comp]
        apply yonedaEquiv.injective
        rw [yonedaEquiv‚ÇÄ, yonedaEquiv_map_comp]
        erw [‚Üê FunctorToTypes.naturality]
        apply congr_arg
        ext i : 1
        fin_cases i
        rfl
      rel := by
        rw [‚Üê cancel_epi (Œ≤_ _ _).hom]
        apply MonoidalClosed.curry_injective
        ext m ‚ü®x, hx‚ü©
        simp at hx }‚ü©
  have h' := h.symm.relStruct (Fin.last (n + 1))
  let Œ± : Fin (n + 2) ‚Üí (Œî[n + 2] ‚ü∂ X) :=
    Fin.lastCases h'.map (fun i ‚Ü¶
      stdSimplex.map (SimplexCategory.œÉ i.castSucc) ‚â´ q.map)
  have hŒ±‚ÇÅ (i : Fin (n + 1)) :
      Œ± i.castSucc = stdSimplex.map (SimplexCategory.œÉ i.castSucc) ‚â´ q.map := by simp [Œ±]
  have hŒ±‚ÇÇ : Œ± (Fin.last (n + 1)) = h'.map := by simp [Œ±]
  obtain ‚ü®œÜ, hœÜ‚ü© := prodStdSimplex‚ÇÅ.exists_desc Œ± (fun i ‚Ü¶ by
    obtain ‚ü®i, rfl‚ü© | rfl := i.eq_castSucc_or_eq_last
    ¬∑ rw [hŒ±‚ÇÅ, Fin.succ_castSucc, hŒ±‚ÇÅ, ‚Üê Functor.map_comp_assoc,
        ‚Üê Functor.map_comp_assoc,
        SimplexCategory.Œ¥_comp_œÉ_self, ‚Üê Fin.succ_castSucc, ‚Üê Fin.succ_castSucc,
          SimplexCategory.Œ¥_comp_œÉ_succ]
    ¬∑ conv_rhs => rw [Fin.succ_last, hŒ±‚ÇÇ, h'.Œ¥_castSucc_map]
      rw [hŒ±‚ÇÅ, ‚Üê Functor.map_comp_assoc, ‚Üê Fin.succ_castSucc,
        SimplexCategory.Œ¥_comp_œÉ_succ, CategoryTheory.Functor.map_id, Category.id_comp])
  exact ‚ü®{
    h := œÜ
    h‚ÇÄ := by
      rw [‚Üê prodStdSimplex‚ÇÅ.Œ¥_Œπ_last_assoc, hœÜ, hŒ±‚ÇÇ]
      exact h'.Œ¥_succ_map
    h‚ÇÅ := by
      have eq‚ÇÅ := hŒ±‚ÇÅ 0
      have eq‚ÇÇ := SimplexCategory.Œ¥_comp_œÉ_self (i := (0 : Fin (n + 2)))
      dsimp at eq‚ÇÅ eq‚ÇÇ
      rw [‚Üê prodStdSimplex‚ÇÅ.Œ¥_Œπ_zero_assoc, hœÜ, eq‚ÇÅ,
        ‚Üê stdSimplex.map_comp_assoc, eq‚ÇÇ,
        CategoryTheory.Functor.map_id, Category.id_comp]
    rel := boundary.hom_ext_tensorRight (fun i ‚Ü¶ by
      rw [Subcomplex.ofSimplex_Œπ, comp_const, comp_const, comp_const,
        ‚Üê comp_whiskerRight_assoc, boundary.Œπ_Œπ]
      ext j : 1
      rw [comp_const]
      by_cases hi : i ‚â§ j.castSucc
      ¬∑ rw [prodStdSimplex‚ÇÅ.Œπ_whiskerRight_Œ¥_of_le_assoc _ _ hi, hœÜ]
        obtain ‚ü®j, rfl‚ü© | rfl := j.eq_castSucc_or_eq_last
        ¬∑ rw [Fin.succ_castSucc, hŒ±‚ÇÅ, ‚Üê Functor.map_comp_assoc, ‚Üê Fin.succ_castSucc,
            SimplexCategory.Œ¥_comp_œÉ_of_le hi,
            Functor.map_comp_assoc, Œ¥_map, comp_const]
        ¬∑ simp only [Fin.succ_last, Nat.succ_eq_add_one, hŒ±‚ÇÇ]
          apply h'.Œ¥_map_of_lt i.castSucc
          rwa [Fin.castSucc_lt_castSucc_iff, ‚Üê Fin.succ_last, ‚Üê Fin.le_castSucc_iff]
      ¬∑ simp only [not_le] at hi
        rw [prodStdSimplex‚ÇÅ.Œπ_whiskerRight_Œ¥_of_gt_assoc _ _ hi, hœÜ, hŒ±‚ÇÅ,
          ‚Üê Functor.map_comp_assoc, SimplexCategory.Œ¥_comp_œÉ_of_gt hi,
          Functor.map_comp_assoc, Œ¥_map, comp_const] ) }‚ü©

noncomputable def RelStruct.homotopy {i : Fin (n + 1)} (h : RelStruct p q i) : p.Homotopy q :=
  h.relStruct‚ÇÄ.homotopy

end PtSimplex

end SSet
