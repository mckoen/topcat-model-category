import TopCatModelCategory.SSet.KanComplexW
import TopCatModelCategory.SSet.Homotopy

universe u

open CategoryTheory HomotopicalAlgebra Simplicial SSet.modelCategoryQuillen
  ChosenFiniteProducts MonoidalCategory

namespace SSet

namespace stdSimplex

@[reassoc (attr := simp)]
lemma Œ¥_one_Œπ‚ÇÄ :
    stdSimplex.Œ¥ (1 : Fin 2) ‚â´ Œπ‚ÇÄ =
      SSet.const (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®0, 0‚ü©) :=
  yonedaEquiv.injective (Prod.ext (by ext i; fin_cases i; rfl) (by rfl))

@[reassoc (attr := simp)]
lemma Œ¥_zero_Œπ‚ÇÄ :
    stdSimplex.Œ¥ (0 : Fin 2) ‚â´ Œπ‚ÇÄ =
      SSet.const (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®1, 0‚ü©) :=
  yonedaEquiv.injective (Prod.ext (by ext i; fin_cases i; rfl) (by rfl))

@[reassoc (attr := simp)]
lemma Œ¥_one_Œπ‚ÇÅ :
    stdSimplex.Œ¥ (1 : Fin 2) ‚â´ Œπ‚ÇÅ =
      SSet.const (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®0, 1‚ü©) :=
  yonedaEquiv.injective (Prod.ext (by ext i; fin_cases i; rfl) (by rfl))

@[reassoc (attr := simp)]
lemma Œ¥_zero_Œπ‚ÇÅ :
    stdSimplex.Œ¥ (0 : Fin 2) ‚â´ Œπ‚ÇÅ =
      SSet.const (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®1, 1‚ü©) :=
  yonedaEquiv.injective (Prod.ext (by ext i; fin_cases i; rfl) (by rfl))

end stdSimplex

namespace KanComplex

namespace FundamentalGroupoid

lemma commSq {X : SSet.{u}} [IsFibrant X] (f : Œî[1] ‚äó Œî[1] ‚ü∂ X)
    (x‚ÇÄ‚ÇÄ x‚ÇÄ‚ÇÅ x‚ÇÅ‚ÇÄ x‚ÇÅ‚ÇÅ : FundamentalGroupoid X)
    (h‚ÇÄ‚ÇÄ : f.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®0, 0‚ü©) = x‚ÇÄ‚ÇÄ.pt)
    (h‚ÇÄ‚ÇÅ : f.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®0, 1‚ü©) = x‚ÇÄ‚ÇÅ.pt)
    (h‚ÇÅ‚ÇÄ : f.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®1, 0‚ü©) = x‚ÇÅ‚ÇÄ.pt)
    (h‚ÇÅ‚ÇÅ : f.app _ (prodStdSimplex.obj‚ÇÄEquiv.symm ‚ü®1, 1‚ü©) = x‚ÇÅ‚ÇÅ.pt) :
    CommSq (homMk (Edge.mk (x‚ÇÄ := x‚ÇÄ‚ÇÄ) (x‚ÇÅ := x‚ÇÅ‚ÇÄ) (Œπ‚ÇÄ ‚â´ f)
      (by simp [‚Üê h‚ÇÄ‚ÇÄ]) (by simp [‚Üê h‚ÇÅ‚ÇÄ])))
        (homMk (Edge.mk (Œπ‚ÇÄ ‚â´ (Œ≤_ _ _).hom ‚â´ f)
          (by simp [‚Üê h‚ÇÄ‚ÇÄ]; rfl) (by simp [‚Üê h‚ÇÄ‚ÇÅ]; rfl)))
        (homMk (Edge.mk (Œπ‚ÇÅ ‚â´ (Œ≤_ _ _).hom ‚â´ f)
          (by simp [‚Üê h‚ÇÅ‚ÇÄ]; rfl) (by simp [‚Üê h‚ÇÅ‚ÇÅ]; rfl)))
        (homMk (Edge.mk (x‚ÇÄ := x‚ÇÄ‚ÇÅ) (x‚ÇÅ := x‚ÇÅ‚ÇÅ) (Œπ‚ÇÅ ‚â´ f)
          (by simp [‚Üê h‚ÇÄ‚ÇÅ]) (by simp [‚Üê h‚ÇÅ‚ÇÅ]))) where
  w := by
    trans homMk (Edge.mk (square.diagonal ‚â´ f)
        (by simp [‚Üê h‚ÇÄ‚ÇÄ]) (by simp [‚Üê h‚ÇÅ‚ÇÅ]))
    ¬∑ exact Edge.CompStruct.fac { map := square.ŒπTriangle‚ÇÄ ‚â´ f }
    ¬∑ exact (Edge.CompStruct.fac { map := square.ŒπTriangle‚ÇÅ ‚â´ f }).symm

end FundamentalGroupoid

end KanComplex

variable {X Y : SSet.{u}}

variable (X Y) in
structure HomotopyEquiv where
  hom : X ‚ü∂ Y
  inv : Y ‚ü∂ X
  homInvId : Homotopy (hom ‚â´ inv) (ùüô X)
  invHomId : Homotopy (inv ‚â´ hom) (ùüô Y)

variable (X) in
@[simps hom inv]
noncomputable def HomotopyEquiv.refl : HomotopyEquiv X X where
  hom := ùüô _
  inv := ùüô _
  homInvId := Subcomplex.RelativeMorphism.Homotopy.ofEq (by simp)
  invHomId := Subcomplex.RelativeMorphism.Homotopy.ofEq (by simp)

@[simps]
def HomotopyEquiv.symm (e : HomotopyEquiv X Y) : HomotopyEquiv Y X where
  hom := e.inv
  inv := e.hom
  homInvId := e.invHomId
  invHomId := e.homInvId

namespace KanComplex

variable [IsFibrant Y]

section

variable {f‚ÇÄ f‚ÇÅ : X ‚ü∂ Y} (h : Homotopy f‚ÇÄ f‚ÇÅ)

@[simps! map]
noncomputable def edgeOfHomotopy
  (x : X _‚¶ã0‚¶å) {y‚ÇÄ y‚ÇÅ : Y _‚¶ã0‚¶å} (hy‚ÇÄ : f‚ÇÄ.app _ x = y‚ÇÄ) (hy‚ÇÅ : f‚ÇÅ.app _ x = y‚ÇÅ) :
      FundamentalGroupoid.Edge { pt := y‚ÇÄ } { pt := y‚ÇÅ } :=
  FundamentalGroupoid.Edge.mk (lift (const x) (ùüô _) ‚â´ h.h) (by
    convert yonedaEquiv.symm x ‚â´= h.h‚ÇÄ using 1
    ¬∑ rw [‚Üê Œπ‚ÇÄ_comp_assoc, Œπ‚ÇÄ_stdSimplex_zero]
      rfl
    ¬∑ simp [‚Üê hy‚ÇÄ]) (by
    convert yonedaEquiv.symm x ‚â´= h.h‚ÇÅ using 1
    ¬∑ rw [‚Üê Œπ‚ÇÅ_comp_assoc, Œπ‚ÇÅ_stdSimplex_zero]
      rfl
    ¬∑ simp [‚Üê hy‚ÇÅ])

noncomputable def mapFundamentalGroupoidIsoOfHomotopy [IsFibrant X] :
    mapFundamentalGroupoid f‚ÇÄ ‚âÖ mapFundamentalGroupoid f‚ÇÅ :=
  NatIso.ofComponents
    (fun x ‚Ü¶ asIso (FundamentalGroupoid.homMk (edgeOfHomotopy h x.pt rfl rfl)))
    (fun {x‚ÇÄ x‚ÇÅ} p ‚Ü¶ by
      obtain ‚ü®p, rfl‚ü© := FundamentalGroupoid.homMk_surjective p
      dsimp
      have := (FundamentalGroupoid.commSq (p.map ‚ñ∑ _ ‚â´ h.h)
        ((mapFundamentalGroupoid f‚ÇÄ).obj x‚ÇÄ)
        ((mapFundamentalGroupoid f‚ÇÅ).obj x‚ÇÄ)
        ((mapFundamentalGroupoid f‚ÇÄ).obj x‚ÇÅ)
        ((mapFundamentalGroupoid f‚ÇÅ).obj x‚ÇÅ)
        (by
          simp only [‚Üê h.h‚ÇÄ]
          dsimp
          exact congr_arg _ (Prod.ext p.comm‚ÇÄ' rfl))
        (by
          simp only [‚Üê h.h‚ÇÅ]
          dsimp
          exact congr_arg _ (Prod.ext p.comm‚ÇÄ' rfl))
        (by
          simp only [‚Üê h.h‚ÇÄ]
          dsimp
          exact congr_arg _ (Prod.ext p.comm‚ÇÅ' rfl))
        (by
          simp only [‚Üê h.h‚ÇÅ]
          dsimp
          exact congr_arg _ (Prod.ext p.comm‚ÇÅ' rfl))).w
      convert this
      ¬∑ ext : 1
        dsimp
        simp only [‚Üê h.h‚ÇÄ]
        rfl
      ¬∑ ext : 1
        dsimp
        rw [‚Üê Category.assoc, ‚Üê Category.assoc]
        congr 1
        ext : 1
        ¬∑ simp [‚Üê p.comm‚ÇÅ']
        ¬∑ rfl
      ¬∑ ext : 1
        dsimp
        rw [‚Üê Category.assoc, ‚Üê Category.assoc]
        congr 1
        ext : 1
        ¬∑ simp [‚Üê p.comm‚ÇÄ']
        ¬∑ rfl
      ¬∑ ext : 1
        dsimp
        simp only [‚Üê h.h‚ÇÅ]
        rfl)

variable (n : ‚Ñï) (x : X _‚¶ã0‚¶å) {y‚ÇÄ y‚ÇÅ : Y _‚¶ã0‚¶å}
  (hy‚ÇÄ : f‚ÇÄ.app _ x = y‚ÇÄ) (hy‚ÇÅ : f‚ÇÅ.app _ x = y‚ÇÅ)

lemma congr_mapœÄ_of_homotopy :
    (FundamentalGroupoid.action.map (FundamentalGroupoid.homMk
      (edgeOfHomotopy h x hy‚ÇÄ hy‚ÇÅ))).comp (mapœÄ f‚ÇÄ n x y‚ÇÄ hy‚ÇÄ) = mapœÄ f‚ÇÅ n x y‚ÇÅ hy‚ÇÅ := by
  ext s
  obtain ‚ü®s, rfl‚ü© := s.mk_surjective
  simp only [mapœÄ_mk, Function.comp_apply]
  exact FundamentalGroupoid.action.map_eq
    { map := s.map ‚ñ∑ _ ‚â´ h.h
      whiskerRight_Œπ_comp_map := by
        simp only [edgeOfHomotopy_map, ‚Üê comp_whiskerRight_assoc, s.comm,
          Subcomplex.ofSimplex_Œπ, comp_const]
        rfl }

include h in
lemma bijective_mapœÄ_iff_of_homotopy [IsFibrant X] :
    Function.Bijective (mapœÄ f‚ÇÄ n x y‚ÇÄ hy‚ÇÄ) ‚Üî
      Function.Bijective (mapœÄ f‚ÇÅ n x y‚ÇÅ hy‚ÇÅ) := by
  rw [‚Üê congr_mapœÄ_of_homotopy h n x hy‚ÇÄ hy‚ÇÅ]
  symm
  apply Function.Bijective.of_comp_iff'
  apply FundamentalGroupoid.action.bijective_map

end

variable [IsFibrant X]

lemma isEquivalence_mapFundamentalGroupoid_homotopyEquivHom (e : HomotopyEquiv X Y) :
    (mapFundamentalGroupoid e.hom).IsEquivalence := by
  let e : FundamentalGroupoid X ‚âå FundamentalGroupoid Y :=
    CategoryTheory.Equivalence.mk
      (mapFundamentalGroupoid e.hom) (mapFundamentalGroupoid e.inv)
        ((idMapFundamentalGroupoidIso X).symm ‚â™‚â´
          (mapFundamentalGroupoidIsoOfHomotopy e.homInvId).symm ‚â™‚â´
          compMapFundamentalGroupoidIso e.hom e.inv)
        ((compMapFundamentalGroupoidIso e.inv e.hom).symm ‚â™‚â´
          (mapFundamentalGroupoidIsoOfHomotopy e.invHomId) ‚â™‚â´
          idMapFundamentalGroupoidIso Y)
  exact e.isEquivalence_functor

lemma isEquivalence_mapFundamentalGroupoid_homotopyEquivInv (e : HomotopyEquiv X Y) :
    (mapFundamentalGroupoid e.inv).IsEquivalence :=
  isEquivalence_mapFundamentalGroupoid_homotopyEquivHom e.symm

lemma W.homotopyEquivHom (e : HomotopyEquiv X Y) :
    W e.hom := by
  have := isEquivalence_mapFundamentalGroupoid_homotopyEquivHom e
  refine W.mk _ inferInstance (fun n x y h ‚Ü¶ ?_)
  subst h
  wlog hx : ‚àÉ y, e.inv.app _ y = x generalizing x
  ¬∑ exact W.bijective_of_iso (asIso (FundamentalGroupoid.homMk
      (edgeOfHomotopy e.homInvId x rfl rfl))) (this _ ‚ü®e.hom.app _ x, rfl‚ü©)
  constructor
  ¬∑ have := (bijective_mapœÄ_iff_of_homotopy e.homInvId n x (y‚ÇÅ := x) rfl rfl).2
      (by convert Function.bijective_id; aesop)
    rw [‚Üê mapœÄ_comp_mapœÄ _ _ _ _ rfl _ _ (by aesop)] at this
    exact this.1.of_comp
  ¬∑ obtain ‚ü®y, hy‚ü© := hx
    have := (bijective_mapœÄ_iff_of_homotopy e.invHomId n y (y‚ÇÅ := y) rfl rfl).2
      (by convert Function.bijective_id; aesop)
    subst hy
    rw [‚Üê mapœÄ_comp_mapœÄ _ _ _ _ rfl _ _ (by aesop)] at this
    exact this.2.of_comp

lemma W.homotopyEquivInv (e : HomotopyEquiv X Y) :
    W e.inv := W.homotopyEquivHom e.symm

variable {f‚ÇÄ f‚ÇÅ : X ‚ü∂ Y}

lemma W.of_homotopy (h‚ÇÄ : W f‚ÇÄ) (h : Homotopy f‚ÇÄ f‚ÇÅ) : W f‚ÇÅ :=
  W.mk _ (by
    have := h‚ÇÄ.isEquivalence
    exact Functor.isEquivalence_of_iso (mapFundamentalGroupoidIsoOfHomotopy h)) (by
      intro n x y hxy
      rw [‚Üê congr_mapœÄ_of_homotopy h n x rfl hxy]
      exact (FundamentalGroupoid.action.bijective_map _ _).comp (h‚ÇÄ.bijective _ _ _ _))

lemma W.iff_homotopy (h : Homotopy f‚ÇÄ f‚ÇÅ) :
    W f‚ÇÄ ‚Üî W f‚ÇÅ :=
  ‚ü®fun hf‚ÇÄ ‚Ü¶ hf‚ÇÄ.of_homotopy h,
    fun hf‚ÇÅ ‚Ü¶ hf‚ÇÅ.of_homotopy h.symm‚ü©

end KanComplex

end SSet
